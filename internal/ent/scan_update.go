// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter/model"
	"github.com/auroraride/cabservd/internal/ent/predicate"
	"github.com/auroraride/cabservd/internal/ent/scan"
)

// ScanUpdate is the builder for updating Scan entities.
type ScanUpdate struct {
	config
	hooks     []Hook
	mutation  *ScanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ScanUpdate builder.
func (su *ScanUpdate) Where(ps ...predicate.Scan) *ScanUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *ScanUpdate) SetUpdatedAt(t time.Time) *ScanUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// SetUserID sets the "user_id" field.
func (su *ScanUpdate) SetUserID(s string) *ScanUpdate {
	su.mutation.SetUserID(s)
	return su
}

// SetUserType sets the "user_type" field.
func (su *ScanUpdate) SetUserType(mt model.UserType) *ScanUpdate {
	su.mutation.SetUserType(mt)
	return su
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (su *ScanUpdate) SetNillableUserType(mt *model.UserType) *ScanUpdate {
	if mt != nil {
		su.SetUserType(*mt)
	}
	return su
}

// ClearUserType clears the value of the "user_type" field.
func (su *ScanUpdate) ClearUserType() *ScanUpdate {
	su.mutation.ClearUserType()
	return su
}

// SetSerial sets the "serial" field.
func (su *ScanUpdate) SetSerial(s string) *ScanUpdate {
	su.mutation.SetSerial(s)
	return su
}

// SetData sets the "data" field.
func (su *ScanUpdate) SetData(mur *model.ExchangeUsableResponse) *ScanUpdate {
	su.mutation.SetData(mur)
	return su
}

// ClearData clears the value of the "data" field.
func (su *ScanUpdate) ClearData() *ScanUpdate {
	su.mutation.ClearData()
	return su
}

// Mutation returns the ScanMutation object of the builder.
func (su *ScanUpdate) Mutation() *ScanMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ScanUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks[int, ScanMutation](ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ScanUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ScanUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ScanUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *ScanUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := scan.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ScanUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScanUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ScanUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scan.Table,
			Columns: scan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: scan.FieldID,
			},
		},
	}
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(scan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UserID(); ok {
		_spec.SetField(scan.FieldUserID, field.TypeString, value)
	}
	if value, ok := su.mutation.UserType(); ok {
		_spec.SetField(scan.FieldUserType, field.TypeOther, value)
	}
	if su.mutation.UserTypeCleared() {
		_spec.ClearField(scan.FieldUserType, field.TypeOther)
	}
	if value, ok := su.mutation.Serial(); ok {
		_spec.SetField(scan.FieldSerial, field.TypeString, value)
	}
	if value, ok := su.mutation.Data(); ok {
		_spec.SetField(scan.FieldData, field.TypeJSON, value)
	}
	if su.mutation.DataCleared() {
		_spec.ClearField(scan.FieldData, field.TypeJSON)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ScanUpdateOne is the builder for updating a single Scan entity.
type ScanUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ScanMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *ScanUpdateOne) SetUpdatedAt(t time.Time) *ScanUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// SetUserID sets the "user_id" field.
func (suo *ScanUpdateOne) SetUserID(s string) *ScanUpdateOne {
	suo.mutation.SetUserID(s)
	return suo
}

// SetUserType sets the "user_type" field.
func (suo *ScanUpdateOne) SetUserType(mt model.UserType) *ScanUpdateOne {
	suo.mutation.SetUserType(mt)
	return suo
}

// SetNillableUserType sets the "user_type" field if the given value is not nil.
func (suo *ScanUpdateOne) SetNillableUserType(mt *model.UserType) *ScanUpdateOne {
	if mt != nil {
		suo.SetUserType(*mt)
	}
	return suo
}

// ClearUserType clears the value of the "user_type" field.
func (suo *ScanUpdateOne) ClearUserType() *ScanUpdateOne {
	suo.mutation.ClearUserType()
	return suo
}

// SetSerial sets the "serial" field.
func (suo *ScanUpdateOne) SetSerial(s string) *ScanUpdateOne {
	suo.mutation.SetSerial(s)
	return suo
}

// SetData sets the "data" field.
func (suo *ScanUpdateOne) SetData(mur *model.ExchangeUsableResponse) *ScanUpdateOne {
	suo.mutation.SetData(mur)
	return suo
}

// ClearData clears the value of the "data" field.
func (suo *ScanUpdateOne) ClearData() *ScanUpdateOne {
	suo.mutation.ClearData()
	return suo
}

// Mutation returns the ScanMutation object of the builder.
func (suo *ScanUpdateOne) Mutation() *ScanMutation {
	return suo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ScanUpdateOne) Select(field string, fields ...string) *ScanUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Scan entity.
func (suo *ScanUpdateOne) Save(ctx context.Context) (*Scan, error) {
	suo.defaults()
	return withHooks[*Scan, ScanMutation](ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ScanUpdateOne) SaveX(ctx context.Context) *Scan {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ScanUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ScanUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *ScanUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := scan.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ScanUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ScanUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ScanUpdateOne) sqlSave(ctx context.Context) (_node *Scan, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   scan.Table,
			Columns: scan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: scan.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Scan.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, scan.FieldID)
		for _, f := range fields {
			if !scan.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != scan.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(scan.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UserID(); ok {
		_spec.SetField(scan.FieldUserID, field.TypeString, value)
	}
	if value, ok := suo.mutation.UserType(); ok {
		_spec.SetField(scan.FieldUserType, field.TypeOther, value)
	}
	if suo.mutation.UserTypeCleared() {
		_spec.ClearField(scan.FieldUserType, field.TypeOther)
	}
	if value, ok := suo.mutation.Serial(); ok {
		_spec.SetField(scan.FieldSerial, field.TypeString, value)
	}
	if value, ok := suo.mutation.Data(); ok {
		_spec.SetField(scan.FieldData, field.TypeJSON, value)
	}
	if suo.mutation.DataCleared() {
		_spec.ClearField(scan.FieldData, field.TypeJSON)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Scan{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{scan.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
