// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/auroraride/cabservd/internal/ent/bin"
	"github.com/auroraride/cabservd/internal/ent/cabinet"
	"github.com/auroraride/cabservd/internal/ent/console"
	"github.com/auroraride/cabservd/internal/ent/predicate"
	"github.com/auroraride/cabservd/internal/ent/scan"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 4)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   bin.Table,
			Columns: bin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: bin.FieldID,
			},
		},
		Type: "Bin",
		Fields: map[string]*sqlgraph.FieldSpec{
			bin.FieldCreatedAt:     {Type: field.TypeTime, Column: bin.FieldCreatedAt},
			bin.FieldUpdatedAt:     {Type: field.TypeTime, Column: bin.FieldUpdatedAt},
			bin.FieldUUID:          {Type: field.TypeString, Column: bin.FieldUUID},
			bin.FieldCabinetID:     {Type: field.TypeUint64, Column: bin.FieldCabinetID},
			bin.FieldBrand:         {Type: field.TypeOther, Column: bin.FieldBrand},
			bin.FieldSerial:        {Type: field.TypeString, Column: bin.FieldSerial},
			bin.FieldName:          {Type: field.TypeString, Column: bin.FieldName},
			bin.FieldOrdinal:       {Type: field.TypeInt, Column: bin.FieldOrdinal},
			bin.FieldOpen:          {Type: field.TypeBool, Column: bin.FieldOpen},
			bin.FieldEnable:        {Type: field.TypeBool, Column: bin.FieldEnable},
			bin.FieldHealth:        {Type: field.TypeBool, Column: bin.FieldHealth},
			bin.FieldBatteryExists: {Type: field.TypeBool, Column: bin.FieldBatteryExists},
			bin.FieldBatterySn:     {Type: field.TypeString, Column: bin.FieldBatterySn},
			bin.FieldVoltage:       {Type: field.TypeFloat64, Column: bin.FieldVoltage},
			bin.FieldCurrent:       {Type: field.TypeFloat64, Column: bin.FieldCurrent},
			bin.FieldSoc:           {Type: field.TypeFloat64, Column: bin.FieldSoc},
			bin.FieldSoh:           {Type: field.TypeFloat64, Column: bin.FieldSoh},
			bin.FieldRemark:        {Type: field.TypeString, Column: bin.FieldRemark},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cabinet.Table,
			Columns: cabinet.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinet.FieldID,
			},
		},
		Type: "Cabinet",
		Fields: map[string]*sqlgraph.FieldSpec{
			cabinet.FieldCreatedAt:   {Type: field.TypeTime, Column: cabinet.FieldCreatedAt},
			cabinet.FieldUpdatedAt:   {Type: field.TypeTime, Column: cabinet.FieldUpdatedAt},
			cabinet.FieldOnline:      {Type: field.TypeBool, Column: cabinet.FieldOnline},
			cabinet.FieldPower:       {Type: field.TypeBool, Column: cabinet.FieldPower},
			cabinet.FieldBrand:       {Type: field.TypeOther, Column: cabinet.FieldBrand},
			cabinet.FieldSerial:      {Type: field.TypeString, Column: cabinet.FieldSerial},
			cabinet.FieldStatus:      {Type: field.TypeEnum, Column: cabinet.FieldStatus},
			cabinet.FieldEnable:      {Type: field.TypeBool, Column: cabinet.FieldEnable},
			cabinet.FieldLng:         {Type: field.TypeFloat64, Column: cabinet.FieldLng},
			cabinet.FieldLat:         {Type: field.TypeFloat64, Column: cabinet.FieldLat},
			cabinet.FieldGsm:         {Type: field.TypeFloat64, Column: cabinet.FieldGsm},
			cabinet.FieldVoltage:     {Type: field.TypeFloat64, Column: cabinet.FieldVoltage},
			cabinet.FieldCurrent:     {Type: field.TypeFloat64, Column: cabinet.FieldCurrent},
			cabinet.FieldTemperature: {Type: field.TypeFloat64, Column: cabinet.FieldTemperature},
			cabinet.FieldElectricity: {Type: field.TypeFloat64, Column: cabinet.FieldElectricity},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   console.Table,
			Columns: console.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: console.FieldID,
			},
		},
		Type: "Console",
		Fields: map[string]*sqlgraph.FieldSpec{
			console.FieldCabinetID: {Type: field.TypeUint64, Column: console.FieldCabinetID},
			console.FieldBinID:     {Type: field.TypeUint64, Column: console.FieldBinID},
			console.FieldOperate:   {Type: field.TypeOther, Column: console.FieldOperate},
			console.FieldBrand:     {Type: field.TypeOther, Column: console.FieldBrand},
			console.FieldSerial:    {Type: field.TypeString, Column: console.FieldSerial},
			console.FieldUUID:      {Type: field.TypeUUID, Column: console.FieldUUID},
			console.FieldBusiness:  {Type: field.TypeEnum, Column: console.FieldBusiness},
			console.FieldUserID:    {Type: field.TypeString, Column: console.FieldUserID},
			console.FieldUserType:  {Type: field.TypeOther, Column: console.FieldUserType},
			console.FieldStep:      {Type: field.TypeInt, Column: console.FieldStep},
			console.FieldStatus:    {Type: field.TypeEnum, Column: console.FieldStatus},
			console.FieldBeforeBin: {Type: field.TypeJSON, Column: console.FieldBeforeBin},
			console.FieldAfterBin:  {Type: field.TypeJSON, Column: console.FieldAfterBin},
			console.FieldMessage:   {Type: field.TypeString, Column: console.FieldMessage},
			console.FieldStartAt:   {Type: field.TypeTime, Column: console.FieldStartAt},
			console.FieldStopAt:    {Type: field.TypeTime, Column: console.FieldStopAt},
			console.FieldDuration:  {Type: field.TypeFloat64, Column: console.FieldDuration},
			console.FieldRemark:    {Type: field.TypeString, Column: console.FieldRemark},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   scan.Table,
			Columns: scan.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: scan.FieldID,
			},
		},
		Type: "Scan",
		Fields: map[string]*sqlgraph.FieldSpec{
			scan.FieldCreatedAt: {Type: field.TypeTime, Column: scan.FieldCreatedAt},
			scan.FieldUpdatedAt: {Type: field.TypeTime, Column: scan.FieldUpdatedAt},
			scan.FieldCabinetID: {Type: field.TypeUint64, Column: scan.FieldCabinetID},
			scan.FieldUUID:      {Type: field.TypeUUID, Column: scan.FieldUUID},
			scan.FieldBusiness:  {Type: field.TypeEnum, Column: scan.FieldBusiness},
			scan.FieldEfficient: {Type: field.TypeBool, Column: scan.FieldEfficient},
			scan.FieldUserID:    {Type: field.TypeString, Column: scan.FieldUserID},
			scan.FieldUserType:  {Type: field.TypeOther, Column: scan.FieldUserType},
			scan.FieldSerial:    {Type: field.TypeString, Column: scan.FieldSerial},
			scan.FieldData:      {Type: field.TypeJSON, Column: scan.FieldData},
		},
	}
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bin.CabinetTable,
			Columns: []string{bin.CabinetColumn},
			Bidi:    false,
		},
		"Bin",
		"Cabinet",
	)
	graph.MustAddE(
		"bins",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BinsTable,
			Columns: []string{cabinet.BinsColumn},
			Bidi:    false,
		},
		"Cabinet",
		"Bin",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   console.CabinetTable,
			Columns: []string{console.CabinetColumn},
			Bidi:    false,
		},
		"Console",
		"Cabinet",
	)
	graph.MustAddE(
		"bin",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   console.BinTable,
			Columns: []string{console.BinColumn},
			Bidi:    false,
		},
		"Console",
		"Bin",
	)
	graph.MustAddE(
		"cabinet",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scan.CabinetTable,
			Columns: []string{scan.CabinetColumn},
			Bidi:    false,
		},
		"Scan",
		"Cabinet",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (bq *BinQuery) addPredicate(pred func(s *sql.Selector)) {
	bq.predicates = append(bq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the BinQuery builder.
func (bq *BinQuery) Filter() *BinFilter {
	return &BinFilter{config: bq.config, predicateAdder: bq}
}

// addPredicate implements the predicateAdder interface.
func (m *BinMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the BinMutation builder.
func (m *BinMutation) Filter() *BinFilter {
	return &BinFilter{config: m.config, predicateAdder: m}
}

// BinFilter provides a generic filtering capability at runtime for BinQuery.
type BinFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *BinFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *BinFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(bin.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *BinFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(bin.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *BinFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(bin.FieldUpdatedAt))
}

// WhereUUID applies the entql string predicate on the uuid field.
func (f *BinFilter) WhereUUID(p entql.StringP) {
	f.Where(p.Field(bin.FieldUUID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *BinFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(bin.FieldCabinetID))
}

// WhereBrand applies the entql other predicate on the brand field.
func (f *BinFilter) WhereBrand(p entql.OtherP) {
	f.Where(p.Field(bin.FieldBrand))
}

// WhereSerial applies the entql string predicate on the serial field.
func (f *BinFilter) WhereSerial(p entql.StringP) {
	f.Where(p.Field(bin.FieldSerial))
}

// WhereName applies the entql string predicate on the name field.
func (f *BinFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(bin.FieldName))
}

// WhereOrdinal applies the entql int predicate on the ordinal field.
func (f *BinFilter) WhereOrdinal(p entql.IntP) {
	f.Where(p.Field(bin.FieldOrdinal))
}

// WhereOpen applies the entql bool predicate on the open field.
func (f *BinFilter) WhereOpen(p entql.BoolP) {
	f.Where(p.Field(bin.FieldOpen))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *BinFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(bin.FieldEnable))
}

// WhereHealth applies the entql bool predicate on the health field.
func (f *BinFilter) WhereHealth(p entql.BoolP) {
	f.Where(p.Field(bin.FieldHealth))
}

// WhereBatteryExists applies the entql bool predicate on the battery_exists field.
func (f *BinFilter) WhereBatteryExists(p entql.BoolP) {
	f.Where(p.Field(bin.FieldBatteryExists))
}

// WhereBatterySn applies the entql string predicate on the battery_sn field.
func (f *BinFilter) WhereBatterySn(p entql.StringP) {
	f.Where(p.Field(bin.FieldBatterySn))
}

// WhereVoltage applies the entql float64 predicate on the voltage field.
func (f *BinFilter) WhereVoltage(p entql.Float64P) {
	f.Where(p.Field(bin.FieldVoltage))
}

// WhereCurrent applies the entql float64 predicate on the current field.
func (f *BinFilter) WhereCurrent(p entql.Float64P) {
	f.Where(p.Field(bin.FieldCurrent))
}

// WhereSoc applies the entql float64 predicate on the soc field.
func (f *BinFilter) WhereSoc(p entql.Float64P) {
	f.Where(p.Field(bin.FieldSoc))
}

// WhereSoh applies the entql float64 predicate on the soh field.
func (f *BinFilter) WhereSoh(p entql.Float64P) {
	f.Where(p.Field(bin.FieldSoh))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *BinFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(bin.FieldRemark))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *BinFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *BinFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *CabinetQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CabinetQuery builder.
func (cq *CabinetQuery) Filter() *CabinetFilter {
	return &CabinetFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *CabinetMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CabinetMutation builder.
func (m *CabinetMutation) Filter() *CabinetFilter {
	return &CabinetFilter{config: m.config, predicateAdder: m}
}

// CabinetFilter provides a generic filtering capability at runtime for CabinetQuery.
type CabinetFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CabinetFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CabinetFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(cabinet.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CabinetFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CabinetFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinet.FieldUpdatedAt))
}

// WhereOnline applies the entql bool predicate on the online field.
func (f *CabinetFilter) WhereOnline(p entql.BoolP) {
	f.Where(p.Field(cabinet.FieldOnline))
}

// WherePower applies the entql bool predicate on the power field.
func (f *CabinetFilter) WherePower(p entql.BoolP) {
	f.Where(p.Field(cabinet.FieldPower))
}

// WhereBrand applies the entql other predicate on the brand field.
func (f *CabinetFilter) WhereBrand(p entql.OtherP) {
	f.Where(p.Field(cabinet.FieldBrand))
}

// WhereSerial applies the entql string predicate on the serial field.
func (f *CabinetFilter) WhereSerial(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldSerial))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *CabinetFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(cabinet.FieldStatus))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *CabinetFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(cabinet.FieldEnable))
}

// WhereLng applies the entql float64 predicate on the lng field.
func (f *CabinetFilter) WhereLng(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldLng))
}

// WhereLat applies the entql float64 predicate on the lat field.
func (f *CabinetFilter) WhereLat(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldLat))
}

// WhereGsm applies the entql float64 predicate on the gsm field.
func (f *CabinetFilter) WhereGsm(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldGsm))
}

// WhereVoltage applies the entql float64 predicate on the voltage field.
func (f *CabinetFilter) WhereVoltage(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldVoltage))
}

// WhereCurrent applies the entql float64 predicate on the current field.
func (f *CabinetFilter) WhereCurrent(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldCurrent))
}

// WhereTemperature applies the entql float64 predicate on the temperature field.
func (f *CabinetFilter) WhereTemperature(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldTemperature))
}

// WhereElectricity applies the entql float64 predicate on the electricity field.
func (f *CabinetFilter) WhereElectricity(p entql.Float64P) {
	f.Where(p.Field(cabinet.FieldElectricity))
}

// WhereHasBins applies a predicate to check if query has an edge bins.
func (f *CabinetFilter) WhereHasBins() {
	f.Where(entql.HasEdge("bins"))
}

// WhereHasBinsWith applies a predicate to check if query has an edge bins with a given conditions (other predicates).
func (f *CabinetFilter) WhereHasBinsWith(preds ...predicate.Bin) {
	f.Where(entql.HasEdgeWith("bins", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (cq *ConsoleQuery) addPredicate(pred func(s *sql.Selector)) {
	cq.predicates = append(cq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ConsoleQuery builder.
func (cq *ConsoleQuery) Filter() *ConsoleFilter {
	return &ConsoleFilter{config: cq.config, predicateAdder: cq}
}

// addPredicate implements the predicateAdder interface.
func (m *ConsoleMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ConsoleMutation builder.
func (m *ConsoleMutation) Filter() *ConsoleFilter {
	return &ConsoleFilter{config: m.config, predicateAdder: m}
}

// ConsoleFilter provides a generic filtering capability at runtime for ConsoleQuery.
type ConsoleFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ConsoleFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ConsoleFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(console.FieldID))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *ConsoleFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(console.FieldCabinetID))
}

// WhereBinID applies the entql uint64 predicate on the bin_id field.
func (f *ConsoleFilter) WhereBinID(p entql.Uint64P) {
	f.Where(p.Field(console.FieldBinID))
}

// WhereOperate applies the entql other predicate on the operate field.
func (f *ConsoleFilter) WhereOperate(p entql.OtherP) {
	f.Where(p.Field(console.FieldOperate))
}

// WhereBrand applies the entql other predicate on the brand field.
func (f *ConsoleFilter) WhereBrand(p entql.OtherP) {
	f.Where(p.Field(console.FieldBrand))
}

// WhereSerial applies the entql string predicate on the serial field.
func (f *ConsoleFilter) WhereSerial(p entql.StringP) {
	f.Where(p.Field(console.FieldSerial))
}

// WhereUUID applies the entql [16]byte predicate on the uuid field.
func (f *ConsoleFilter) WhereUUID(p entql.ValueP) {
	f.Where(p.Field(console.FieldUUID))
}

// WhereBusiness applies the entql string predicate on the business field.
func (f *ConsoleFilter) WhereBusiness(p entql.StringP) {
	f.Where(p.Field(console.FieldBusiness))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *ConsoleFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(console.FieldUserID))
}

// WhereUserType applies the entql other predicate on the user_type field.
func (f *ConsoleFilter) WhereUserType(p entql.OtherP) {
	f.Where(p.Field(console.FieldUserType))
}

// WhereStep applies the entql int predicate on the step field.
func (f *ConsoleFilter) WhereStep(p entql.IntP) {
	f.Where(p.Field(console.FieldStep))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *ConsoleFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(console.FieldStatus))
}

// WhereBeforeBin applies the entql json.RawMessage predicate on the before_bin field.
func (f *ConsoleFilter) WhereBeforeBin(p entql.BytesP) {
	f.Where(p.Field(console.FieldBeforeBin))
}

// WhereAfterBin applies the entql json.RawMessage predicate on the after_bin field.
func (f *ConsoleFilter) WhereAfterBin(p entql.BytesP) {
	f.Where(p.Field(console.FieldAfterBin))
}

// WhereMessage applies the entql string predicate on the message field.
func (f *ConsoleFilter) WhereMessage(p entql.StringP) {
	f.Where(p.Field(console.FieldMessage))
}

// WhereStartAt applies the entql time.Time predicate on the startAt field.
func (f *ConsoleFilter) WhereStartAt(p entql.TimeP) {
	f.Where(p.Field(console.FieldStartAt))
}

// WhereStopAt applies the entql time.Time predicate on the stopAt field.
func (f *ConsoleFilter) WhereStopAt(p entql.TimeP) {
	f.Where(p.Field(console.FieldStopAt))
}

// WhereDuration applies the entql float64 predicate on the duration field.
func (f *ConsoleFilter) WhereDuration(p entql.Float64P) {
	f.Where(p.Field(console.FieldDuration))
}

// WhereRemark applies the entql string predicate on the remark field.
func (f *ConsoleFilter) WhereRemark(p entql.StringP) {
	f.Where(p.Field(console.FieldRemark))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *ConsoleFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *ConsoleFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasBin applies a predicate to check if query has an edge bin.
func (f *ConsoleFilter) WhereHasBin() {
	f.Where(entql.HasEdge("bin"))
}

// WhereHasBinWith applies a predicate to check if query has an edge bin with a given conditions (other predicates).
func (f *ConsoleFilter) WhereHasBinWith(preds ...predicate.Bin) {
	f.Where(entql.HasEdgeWith("bin", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (sq *ScanQuery) addPredicate(pred func(s *sql.Selector)) {
	sq.predicates = append(sq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the ScanQuery builder.
func (sq *ScanQuery) Filter() *ScanFilter {
	return &ScanFilter{config: sq.config, predicateAdder: sq}
}

// addPredicate implements the predicateAdder interface.
func (m *ScanMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the ScanMutation builder.
func (m *ScanMutation) Filter() *ScanFilter {
	return &ScanFilter{config: m.config, predicateAdder: m}
}

// ScanFilter provides a generic filtering capability at runtime for ScanQuery.
type ScanFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *ScanFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *ScanFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(scan.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *ScanFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(scan.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *ScanFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(scan.FieldUpdatedAt))
}

// WhereCabinetID applies the entql uint64 predicate on the cabinet_id field.
func (f *ScanFilter) WhereCabinetID(p entql.Uint64P) {
	f.Where(p.Field(scan.FieldCabinetID))
}

// WhereUUID applies the entql [16]byte predicate on the uuid field.
func (f *ScanFilter) WhereUUID(p entql.ValueP) {
	f.Where(p.Field(scan.FieldUUID))
}

// WhereBusiness applies the entql string predicate on the business field.
func (f *ScanFilter) WhereBusiness(p entql.StringP) {
	f.Where(p.Field(scan.FieldBusiness))
}

// WhereEfficient applies the entql bool predicate on the efficient field.
func (f *ScanFilter) WhereEfficient(p entql.BoolP) {
	f.Where(p.Field(scan.FieldEfficient))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *ScanFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(scan.FieldUserID))
}

// WhereUserType applies the entql other predicate on the user_type field.
func (f *ScanFilter) WhereUserType(p entql.OtherP) {
	f.Where(p.Field(scan.FieldUserType))
}

// WhereSerial applies the entql string predicate on the serial field.
func (f *ScanFilter) WhereSerial(p entql.StringP) {
	f.Where(p.Field(scan.FieldSerial))
}

// WhereData applies the entql json.RawMessage predicate on the data field.
func (f *ScanFilter) WhereData(p entql.BytesP) {
	f.Where(p.Field(scan.FieldData))
}

// WhereHasCabinet applies a predicate to check if query has an edge cabinet.
func (f *ScanFilter) WhereHasCabinet() {
	f.Where(entql.HasEdge("cabinet"))
}

// WhereHasCabinetWith applies a predicate to check if query has an edge cabinet with a given conditions (other predicates).
func (f *ScanFilter) WhereHasCabinetWith(preds ...predicate.Cabinet) {
	f.Where(entql.HasEdgeWith("cabinet", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
