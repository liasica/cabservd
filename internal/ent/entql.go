// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/auroraride/cabservd/internal/ent/cabinetbin"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 1)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   cabinetbin.Table,
			Columns: cabinetbin.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinetbin.FieldID,
			},
		},
		Type: "CabinetBin",
		Fields: map[string]*sqlgraph.FieldSpec{
			cabinetbin.FieldCreatedAt: {Type: field.TypeTime, Column: cabinetbin.FieldCreatedAt},
			cabinetbin.FieldUpdatedAt: {Type: field.TypeTime, Column: cabinetbin.FieldUpdatedAt},
			cabinetbin.FieldUUID:      {Type: field.TypeString, Column: cabinetbin.FieldUUID},
			cabinetbin.FieldBrand:     {Type: field.TypeString, Column: cabinetbin.FieldBrand},
			cabinetbin.FieldSn:        {Type: field.TypeString, Column: cabinetbin.FieldSn},
			cabinetbin.FieldName:      {Type: field.TypeString, Column: cabinetbin.FieldName},
			cabinetbin.FieldIndex:     {Type: field.TypeInt, Column: cabinetbin.FieldIndex},
			cabinetbin.FieldOpen:      {Type: field.TypeBool, Column: cabinetbin.FieldOpen},
			cabinetbin.FieldEnable:    {Type: field.TypeBool, Column: cabinetbin.FieldEnable},
			cabinetbin.FieldBatterySn: {Type: field.TypeString, Column: cabinetbin.FieldBatterySn},
			cabinetbin.FieldVoltage:   {Type: field.TypeFloat64, Column: cabinetbin.FieldVoltage},
			cabinetbin.FieldCurrent:   {Type: field.TypeFloat64, Column: cabinetbin.FieldCurrent},
		},
	}
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (cbq *CabinetBinQuery) addPredicate(pred func(s *sql.Selector)) {
	cbq.predicates = append(cbq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the CabinetBinQuery builder.
func (cbq *CabinetBinQuery) Filter() *CabinetBinFilter {
	return &CabinetBinFilter{config: cbq.config, predicateAdder: cbq}
}

// addPredicate implements the predicateAdder interface.
func (m *CabinetBinMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the CabinetBinMutation builder.
func (m *CabinetBinMutation) Filter() *CabinetBinFilter {
	return &CabinetBinFilter{config: m.config, predicateAdder: m}
}

// CabinetBinFilter provides a generic filtering capability at runtime for CabinetBinQuery.
type CabinetBinFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *CabinetBinFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql uint64 predicate on the id field.
func (f *CabinetBinFilter) WhereID(p entql.Uint64P) {
	f.Where(p.Field(cabinetbin.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *CabinetBinFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetbin.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *CabinetBinFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(cabinetbin.FieldUpdatedAt))
}

// WhereUUID applies the entql string predicate on the uuid field.
func (f *CabinetBinFilter) WhereUUID(p entql.StringP) {
	f.Where(p.Field(cabinetbin.FieldUUID))
}

// WhereBrand applies the entql string predicate on the brand field.
func (f *CabinetBinFilter) WhereBrand(p entql.StringP) {
	f.Where(p.Field(cabinetbin.FieldBrand))
}

// WhereSn applies the entql string predicate on the sn field.
func (f *CabinetBinFilter) WhereSn(p entql.StringP) {
	f.Where(p.Field(cabinetbin.FieldSn))
}

// WhereName applies the entql string predicate on the name field.
func (f *CabinetBinFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(cabinetbin.FieldName))
}

// WhereIndex applies the entql int predicate on the index field.
func (f *CabinetBinFilter) WhereIndex(p entql.IntP) {
	f.Where(p.Field(cabinetbin.FieldIndex))
}

// WhereOpen applies the entql bool predicate on the open field.
func (f *CabinetBinFilter) WhereOpen(p entql.BoolP) {
	f.Where(p.Field(cabinetbin.FieldOpen))
}

// WhereEnable applies the entql bool predicate on the enable field.
func (f *CabinetBinFilter) WhereEnable(p entql.BoolP) {
	f.Where(p.Field(cabinetbin.FieldEnable))
}

// WhereBatterySn applies the entql string predicate on the battery_sn field.
func (f *CabinetBinFilter) WhereBatterySn(p entql.StringP) {
	f.Where(p.Field(cabinetbin.FieldBatterySn))
}

// WhereVoltage applies the entql float64 predicate on the voltage field.
func (f *CabinetBinFilter) WhereVoltage(p entql.Float64P) {
	f.Where(p.Field(cabinetbin.FieldVoltage))
}

// WhereCurrent applies the entql float64 predicate on the current field.
func (f *CabinetBinFilter) WhereCurrent(p entql.Float64P) {
	f.Where(p.Field(cabinetbin.FieldCurrent))
}
