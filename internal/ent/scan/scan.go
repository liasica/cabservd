// Code generated by ent, DO NOT EDIT.

package scan

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the scan type in the database.
	Label = "scan"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldEfficient holds the string denoting the efficient field in the database.
	FieldEfficient = "efficient"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldUserType holds the string denoting the user_type field in the database.
	FieldUserType = "user_type"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// Table holds the table name of the scan in the database.
	Table = "scan"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "scan"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
)

// Columns holds all SQL columns for scan fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCabinetID,
	FieldEfficient,
	FieldUserID,
	FieldUserType,
	FieldSerial,
	FieldData,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultEfficient holds the default value on creation for the "efficient" field.
	DefaultEfficient bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
