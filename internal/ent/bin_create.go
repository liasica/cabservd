// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/cabservd/internal/ent/bin"
	"github.com/auroraride/cabservd/internal/ent/cabinet"
)

// BinCreate is the builder for creating a Bin entity.
type BinCreate struct {
	config
	mutation *BinMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (bc *BinCreate) SetCreatedAt(t time.Time) *BinCreate {
	bc.mutation.SetCreatedAt(t)
	return bc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bc *BinCreate) SetNillableCreatedAt(t *time.Time) *BinCreate {
	if t != nil {
		bc.SetCreatedAt(*t)
	}
	return bc
}

// SetUpdatedAt sets the "updated_at" field.
func (bc *BinCreate) SetUpdatedAt(t time.Time) *BinCreate {
	bc.mutation.SetUpdatedAt(t)
	return bc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (bc *BinCreate) SetNillableUpdatedAt(t *time.Time) *BinCreate {
	if t != nil {
		bc.SetUpdatedAt(*t)
	}
	return bc
}

// SetCabinetID sets the "cabinet_id" field.
func (bc *BinCreate) SetCabinetID(u uint64) *BinCreate {
	bc.mutation.SetCabinetID(u)
	return bc
}

// SetSerial sets the "serial" field.
func (bc *BinCreate) SetSerial(s string) *BinCreate {
	bc.mutation.SetSerial(s)
	return bc
}

// SetName sets the "name" field.
func (bc *BinCreate) SetName(s string) *BinCreate {
	bc.mutation.SetName(s)
	return bc
}

// SetOrdinal sets the "ordinal" field.
func (bc *BinCreate) SetOrdinal(i int) *BinCreate {
	bc.mutation.SetOrdinal(i)
	return bc
}

// SetOpen sets the "open" field.
func (bc *BinCreate) SetOpen(b bool) *BinCreate {
	bc.mutation.SetOpen(b)
	return bc
}

// SetNillableOpen sets the "open" field if the given value is not nil.
func (bc *BinCreate) SetNillableOpen(b *bool) *BinCreate {
	if b != nil {
		bc.SetOpen(*b)
	}
	return bc
}

// SetEnable sets the "enable" field.
func (bc *BinCreate) SetEnable(b bool) *BinCreate {
	bc.mutation.SetEnable(b)
	return bc
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (bc *BinCreate) SetNillableEnable(b *bool) *BinCreate {
	if b != nil {
		bc.SetEnable(*b)
	}
	return bc
}

// SetHealth sets the "health" field.
func (bc *BinCreate) SetHealth(b bool) *BinCreate {
	bc.mutation.SetHealth(b)
	return bc
}

// SetNillableHealth sets the "health" field if the given value is not nil.
func (bc *BinCreate) SetNillableHealth(b *bool) *BinCreate {
	if b != nil {
		bc.SetHealth(*b)
	}
	return bc
}

// SetBatteryExists sets the "battery_exists" field.
func (bc *BinCreate) SetBatteryExists(b bool) *BinCreate {
	bc.mutation.SetBatteryExists(b)
	return bc
}

// SetNillableBatteryExists sets the "battery_exists" field if the given value is not nil.
func (bc *BinCreate) SetNillableBatteryExists(b *bool) *BinCreate {
	if b != nil {
		bc.SetBatteryExists(*b)
	}
	return bc
}

// SetBatterySn sets the "battery_sn" field.
func (bc *BinCreate) SetBatterySn(s string) *BinCreate {
	bc.mutation.SetBatterySn(s)
	return bc
}

// SetNillableBatterySn sets the "battery_sn" field if the given value is not nil.
func (bc *BinCreate) SetNillableBatterySn(s *string) *BinCreate {
	if s != nil {
		bc.SetBatterySn(*s)
	}
	return bc
}

// SetVoltage sets the "voltage" field.
func (bc *BinCreate) SetVoltage(f float64) *BinCreate {
	bc.mutation.SetVoltage(f)
	return bc
}

// SetNillableVoltage sets the "voltage" field if the given value is not nil.
func (bc *BinCreate) SetNillableVoltage(f *float64) *BinCreate {
	if f != nil {
		bc.SetVoltage(*f)
	}
	return bc
}

// SetCurrent sets the "current" field.
func (bc *BinCreate) SetCurrent(f float64) *BinCreate {
	bc.mutation.SetCurrent(f)
	return bc
}

// SetNillableCurrent sets the "current" field if the given value is not nil.
func (bc *BinCreate) SetNillableCurrent(f *float64) *BinCreate {
	if f != nil {
		bc.SetCurrent(*f)
	}
	return bc
}

// SetSoc sets the "soc" field.
func (bc *BinCreate) SetSoc(f float64) *BinCreate {
	bc.mutation.SetSoc(f)
	return bc
}

// SetNillableSoc sets the "soc" field if the given value is not nil.
func (bc *BinCreate) SetNillableSoc(f *float64) *BinCreate {
	if f != nil {
		bc.SetSoc(*f)
	}
	return bc
}

// SetSoh sets the "soh" field.
func (bc *BinCreate) SetSoh(f float64) *BinCreate {
	bc.mutation.SetSoh(f)
	return bc
}

// SetNillableSoh sets the "soh" field if the given value is not nil.
func (bc *BinCreate) SetNillableSoh(f *float64) *BinCreate {
	if f != nil {
		bc.SetSoh(*f)
	}
	return bc
}

// SetRemark sets the "remark" field.
func (bc *BinCreate) SetRemark(s string) *BinCreate {
	bc.mutation.SetRemark(s)
	return bc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (bc *BinCreate) SetNillableRemark(s *string) *BinCreate {
	if s != nil {
		bc.SetRemark(*s)
	}
	return bc
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (bc *BinCreate) SetCabinet(c *Cabinet) *BinCreate {
	return bc.SetCabinetID(c.ID)
}

// Mutation returns the BinMutation object of the builder.
func (bc *BinCreate) Mutation() *BinMutation {
	return bc.mutation
}

// Save creates the Bin in the database.
func (bc *BinCreate) Save(ctx context.Context) (*Bin, error) {
	bc.defaults()
	return withHooks[*Bin, BinMutation](ctx, bc.sqlSave, bc.mutation, bc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BinCreate) SaveX(ctx context.Context) *Bin {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BinCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BinCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BinCreate) defaults() {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		v := bin.DefaultCreatedAt()
		bc.mutation.SetCreatedAt(v)
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		v := bin.DefaultUpdatedAt()
		bc.mutation.SetUpdatedAt(v)
	}
	if _, ok := bc.mutation.Open(); !ok {
		v := bin.DefaultOpen
		bc.mutation.SetOpen(v)
	}
	if _, ok := bc.mutation.Enable(); !ok {
		v := bin.DefaultEnable
		bc.mutation.SetEnable(v)
	}
	if _, ok := bc.mutation.Health(); !ok {
		v := bin.DefaultHealth
		bc.mutation.SetHealth(v)
	}
	if _, ok := bc.mutation.BatteryExists(); !ok {
		v := bin.DefaultBatteryExists
		bc.mutation.SetBatteryExists(v)
	}
	if _, ok := bc.mutation.BatterySn(); !ok {
		v := bin.DefaultBatterySn
		bc.mutation.SetBatterySn(v)
	}
	if _, ok := bc.mutation.Voltage(); !ok {
		v := bin.DefaultVoltage
		bc.mutation.SetVoltage(v)
	}
	if _, ok := bc.mutation.Current(); !ok {
		v := bin.DefaultCurrent
		bc.mutation.SetCurrent(v)
	}
	if _, ok := bc.mutation.Soc(); !ok {
		v := bin.DefaultSoc
		bc.mutation.SetSoc(v)
	}
	if _, ok := bc.mutation.Soh(); !ok {
		v := bin.DefaultSoh
		bc.mutation.SetSoh(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BinCreate) check() error {
	if _, ok := bc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Bin.created_at"`)}
	}
	if _, ok := bc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Bin.updated_at"`)}
	}
	if _, ok := bc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet_id", err: errors.New(`ent: missing required field "Bin.cabinet_id"`)}
	}
	if _, ok := bc.mutation.Serial(); !ok {
		return &ValidationError{Name: "serial", err: errors.New(`ent: missing required field "Bin.serial"`)}
	}
	if _, ok := bc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Bin.name"`)}
	}
	if _, ok := bc.mutation.Ordinal(); !ok {
		return &ValidationError{Name: "ordinal", err: errors.New(`ent: missing required field "Bin.ordinal"`)}
	}
	if _, ok := bc.mutation.Open(); !ok {
		return &ValidationError{Name: "open", err: errors.New(`ent: missing required field "Bin.open"`)}
	}
	if _, ok := bc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "Bin.enable"`)}
	}
	if _, ok := bc.mutation.Health(); !ok {
		return &ValidationError{Name: "health", err: errors.New(`ent: missing required field "Bin.health"`)}
	}
	if _, ok := bc.mutation.BatteryExists(); !ok {
		return &ValidationError{Name: "battery_exists", err: errors.New(`ent: missing required field "Bin.battery_exists"`)}
	}
	if _, ok := bc.mutation.BatterySn(); !ok {
		return &ValidationError{Name: "battery_sn", err: errors.New(`ent: missing required field "Bin.battery_sn"`)}
	}
	if _, ok := bc.mutation.Voltage(); !ok {
		return &ValidationError{Name: "voltage", err: errors.New(`ent: missing required field "Bin.voltage"`)}
	}
	if _, ok := bc.mutation.Current(); !ok {
		return &ValidationError{Name: "current", err: errors.New(`ent: missing required field "Bin.current"`)}
	}
	if _, ok := bc.mutation.Soc(); !ok {
		return &ValidationError{Name: "soc", err: errors.New(`ent: missing required field "Bin.soc"`)}
	}
	if _, ok := bc.mutation.Soh(); !ok {
		return &ValidationError{Name: "soh", err: errors.New(`ent: missing required field "Bin.soh"`)}
	}
	if _, ok := bc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet", err: errors.New(`ent: missing required edge "Bin.cabinet"`)}
	}
	return nil
}

func (bc *BinCreate) sqlSave(ctx context.Context) (*Bin, error) {
	if err := bc.check(); err != nil {
		return nil, err
	}
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	bc.mutation.id = &_node.ID
	bc.mutation.done = true
	return _node, nil
}

func (bc *BinCreate) createSpec() (*Bin, *sqlgraph.CreateSpec) {
	var (
		_node = &Bin{config: bc.config}
		_spec = sqlgraph.NewCreateSpec(bin.Table, sqlgraph.NewFieldSpec(bin.FieldID, field.TypeUint64))
	)
	_spec.OnConflict = bc.conflict
	if value, ok := bc.mutation.CreatedAt(); ok {
		_spec.SetField(bin.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := bc.mutation.UpdatedAt(); ok {
		_spec.SetField(bin.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := bc.mutation.Serial(); ok {
		_spec.SetField(bin.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := bc.mutation.Name(); ok {
		_spec.SetField(bin.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := bc.mutation.Ordinal(); ok {
		_spec.SetField(bin.FieldOrdinal, field.TypeInt, value)
		_node.Ordinal = value
	}
	if value, ok := bc.mutation.Open(); ok {
		_spec.SetField(bin.FieldOpen, field.TypeBool, value)
		_node.Open = value
	}
	if value, ok := bc.mutation.Enable(); ok {
		_spec.SetField(bin.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := bc.mutation.Health(); ok {
		_spec.SetField(bin.FieldHealth, field.TypeBool, value)
		_node.Health = value
	}
	if value, ok := bc.mutation.BatteryExists(); ok {
		_spec.SetField(bin.FieldBatteryExists, field.TypeBool, value)
		_node.BatteryExists = value
	}
	if value, ok := bc.mutation.BatterySn(); ok {
		_spec.SetField(bin.FieldBatterySn, field.TypeString, value)
		_node.BatterySn = value
	}
	if value, ok := bc.mutation.Voltage(); ok {
		_spec.SetField(bin.FieldVoltage, field.TypeFloat64, value)
		_node.Voltage = value
	}
	if value, ok := bc.mutation.Current(); ok {
		_spec.SetField(bin.FieldCurrent, field.TypeFloat64, value)
		_node.Current = value
	}
	if value, ok := bc.mutation.Soc(); ok {
		_spec.SetField(bin.FieldSoc, field.TypeFloat64, value)
		_node.Soc = value
	}
	if value, ok := bc.mutation.Soh(); ok {
		_spec.SetField(bin.FieldSoh, field.TypeFloat64, value)
		_node.Soh = value
	}
	if value, ok := bc.mutation.Remark(); ok {
		_spec.SetField(bin.FieldRemark, field.TypeString, value)
		_node.Remark = &value
	}
	if nodes := bc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   bin.CabinetTable,
			Columns: []string{bin.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bin.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BinUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bc *BinCreate) OnConflict(opts ...sql.ConflictOption) *BinUpsertOne {
	bc.conflict = opts
	return &BinUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bc *BinCreate) OnConflictColumns(columns ...string) *BinUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BinUpsertOne{
		create: bc,
	}
}

type (
	// BinUpsertOne is the builder for "upsert"-ing
	//  one Bin node.
	BinUpsertOne struct {
		create *BinCreate
	}

	// BinUpsert is the "OnConflict" setter.
	BinUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *BinUpsert) SetUpdatedAt(v time.Time) *BinUpsert {
	u.Set(bin.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BinUpsert) UpdateUpdatedAt() *BinUpsert {
	u.SetExcluded(bin.FieldUpdatedAt)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BinUpsert) SetCabinetID(v uint64) *BinUpsert {
	u.Set(bin.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BinUpsert) UpdateCabinetID() *BinUpsert {
	u.SetExcluded(bin.FieldCabinetID)
	return u
}

// SetSerial sets the "serial" field.
func (u *BinUpsert) SetSerial(v string) *BinUpsert {
	u.Set(bin.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *BinUpsert) UpdateSerial() *BinUpsert {
	u.SetExcluded(bin.FieldSerial)
	return u
}

// SetName sets the "name" field.
func (u *BinUpsert) SetName(v string) *BinUpsert {
	u.Set(bin.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BinUpsert) UpdateName() *BinUpsert {
	u.SetExcluded(bin.FieldName)
	return u
}

// SetOrdinal sets the "ordinal" field.
func (u *BinUpsert) SetOrdinal(v int) *BinUpsert {
	u.Set(bin.FieldOrdinal, v)
	return u
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *BinUpsert) UpdateOrdinal() *BinUpsert {
	u.SetExcluded(bin.FieldOrdinal)
	return u
}

// AddOrdinal adds v to the "ordinal" field.
func (u *BinUpsert) AddOrdinal(v int) *BinUpsert {
	u.Add(bin.FieldOrdinal, v)
	return u
}

// SetOpen sets the "open" field.
func (u *BinUpsert) SetOpen(v bool) *BinUpsert {
	u.Set(bin.FieldOpen, v)
	return u
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *BinUpsert) UpdateOpen() *BinUpsert {
	u.SetExcluded(bin.FieldOpen)
	return u
}

// SetEnable sets the "enable" field.
func (u *BinUpsert) SetEnable(v bool) *BinUpsert {
	u.Set(bin.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *BinUpsert) UpdateEnable() *BinUpsert {
	u.SetExcluded(bin.FieldEnable)
	return u
}

// SetHealth sets the "health" field.
func (u *BinUpsert) SetHealth(v bool) *BinUpsert {
	u.Set(bin.FieldHealth, v)
	return u
}

// UpdateHealth sets the "health" field to the value that was provided on create.
func (u *BinUpsert) UpdateHealth() *BinUpsert {
	u.SetExcluded(bin.FieldHealth)
	return u
}

// SetBatteryExists sets the "battery_exists" field.
func (u *BinUpsert) SetBatteryExists(v bool) *BinUpsert {
	u.Set(bin.FieldBatteryExists, v)
	return u
}

// UpdateBatteryExists sets the "battery_exists" field to the value that was provided on create.
func (u *BinUpsert) UpdateBatteryExists() *BinUpsert {
	u.SetExcluded(bin.FieldBatteryExists)
	return u
}

// SetBatterySn sets the "battery_sn" field.
func (u *BinUpsert) SetBatterySn(v string) *BinUpsert {
	u.Set(bin.FieldBatterySn, v)
	return u
}

// UpdateBatterySn sets the "battery_sn" field to the value that was provided on create.
func (u *BinUpsert) UpdateBatterySn() *BinUpsert {
	u.SetExcluded(bin.FieldBatterySn)
	return u
}

// SetVoltage sets the "voltage" field.
func (u *BinUpsert) SetVoltage(v float64) *BinUpsert {
	u.Set(bin.FieldVoltage, v)
	return u
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *BinUpsert) UpdateVoltage() *BinUpsert {
	u.SetExcluded(bin.FieldVoltage)
	return u
}

// AddVoltage adds v to the "voltage" field.
func (u *BinUpsert) AddVoltage(v float64) *BinUpsert {
	u.Add(bin.FieldVoltage, v)
	return u
}

// SetCurrent sets the "current" field.
func (u *BinUpsert) SetCurrent(v float64) *BinUpsert {
	u.Set(bin.FieldCurrent, v)
	return u
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *BinUpsert) UpdateCurrent() *BinUpsert {
	u.SetExcluded(bin.FieldCurrent)
	return u
}

// AddCurrent adds v to the "current" field.
func (u *BinUpsert) AddCurrent(v float64) *BinUpsert {
	u.Add(bin.FieldCurrent, v)
	return u
}

// SetSoc sets the "soc" field.
func (u *BinUpsert) SetSoc(v float64) *BinUpsert {
	u.Set(bin.FieldSoc, v)
	return u
}

// UpdateSoc sets the "soc" field to the value that was provided on create.
func (u *BinUpsert) UpdateSoc() *BinUpsert {
	u.SetExcluded(bin.FieldSoc)
	return u
}

// AddSoc adds v to the "soc" field.
func (u *BinUpsert) AddSoc(v float64) *BinUpsert {
	u.Add(bin.FieldSoc, v)
	return u
}

// SetSoh sets the "soh" field.
func (u *BinUpsert) SetSoh(v float64) *BinUpsert {
	u.Set(bin.FieldSoh, v)
	return u
}

// UpdateSoh sets the "soh" field to the value that was provided on create.
func (u *BinUpsert) UpdateSoh() *BinUpsert {
	u.SetExcluded(bin.FieldSoh)
	return u
}

// AddSoh adds v to the "soh" field.
func (u *BinUpsert) AddSoh(v float64) *BinUpsert {
	u.Add(bin.FieldSoh, v)
	return u
}

// SetRemark sets the "remark" field.
func (u *BinUpsert) SetRemark(v string) *BinUpsert {
	u.Set(bin.FieldRemark, v)
	return u
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BinUpsert) UpdateRemark() *BinUpsert {
	u.SetExcluded(bin.FieldRemark)
	return u
}

// ClearRemark clears the value of the "remark" field.
func (u *BinUpsert) ClearRemark() *BinUpsert {
	u.SetNull(bin.FieldRemark)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Bin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BinUpsertOne) UpdateNewValues() *BinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(bin.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bin.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *BinUpsertOne) Ignore() *BinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BinUpsertOne) DoNothing() *BinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BinCreate.OnConflict
// documentation for more info.
func (u *BinUpsertOne) Update(set func(*BinUpsert)) *BinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BinUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BinUpsertOne) SetUpdatedAt(v time.Time) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateUpdatedAt() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BinUpsertOne) SetCabinetID(v uint64) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateCabinetID() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateCabinetID()
	})
}

// SetSerial sets the "serial" field.
func (u *BinUpsertOne) SetSerial(v string) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateSerial() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateSerial()
	})
}

// SetName sets the "name" field.
func (u *BinUpsertOne) SetName(v string) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateName() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateName()
	})
}

// SetOrdinal sets the "ordinal" field.
func (u *BinUpsertOne) SetOrdinal(v int) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetOrdinal(v)
	})
}

// AddOrdinal adds v to the "ordinal" field.
func (u *BinUpsertOne) AddOrdinal(v int) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.AddOrdinal(v)
	})
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateOrdinal() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateOrdinal()
	})
}

// SetOpen sets the "open" field.
func (u *BinUpsertOne) SetOpen(v bool) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetOpen(v)
	})
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateOpen() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateOpen()
	})
}

// SetEnable sets the "enable" field.
func (u *BinUpsertOne) SetEnable(v bool) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateEnable() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateEnable()
	})
}

// SetHealth sets the "health" field.
func (u *BinUpsertOne) SetHealth(v bool) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetHealth(v)
	})
}

// UpdateHealth sets the "health" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateHealth() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateHealth()
	})
}

// SetBatteryExists sets the "battery_exists" field.
func (u *BinUpsertOne) SetBatteryExists(v bool) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetBatteryExists(v)
	})
}

// UpdateBatteryExists sets the "battery_exists" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateBatteryExists() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateBatteryExists()
	})
}

// SetBatterySn sets the "battery_sn" field.
func (u *BinUpsertOne) SetBatterySn(v string) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetBatterySn(v)
	})
}

// UpdateBatterySn sets the "battery_sn" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateBatterySn() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateBatterySn()
	})
}

// SetVoltage sets the "voltage" field.
func (u *BinUpsertOne) SetVoltage(v float64) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *BinUpsertOne) AddVoltage(v float64) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateVoltage() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateVoltage()
	})
}

// SetCurrent sets the "current" field.
func (u *BinUpsertOne) SetCurrent(v float64) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetCurrent(v)
	})
}

// AddCurrent adds v to the "current" field.
func (u *BinUpsertOne) AddCurrent(v float64) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.AddCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateCurrent() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateCurrent()
	})
}

// SetSoc sets the "soc" field.
func (u *BinUpsertOne) SetSoc(v float64) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetSoc(v)
	})
}

// AddSoc adds v to the "soc" field.
func (u *BinUpsertOne) AddSoc(v float64) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.AddSoc(v)
	})
}

// UpdateSoc sets the "soc" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateSoc() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateSoc()
	})
}

// SetSoh sets the "soh" field.
func (u *BinUpsertOne) SetSoh(v float64) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetSoh(v)
	})
}

// AddSoh adds v to the "soh" field.
func (u *BinUpsertOne) AddSoh(v float64) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.AddSoh(v)
	})
}

// UpdateSoh sets the "soh" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateSoh() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateSoh()
	})
}

// SetRemark sets the "remark" field.
func (u *BinUpsertOne) SetRemark(v string) *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BinUpsertOne) UpdateRemark() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BinUpsertOne) ClearRemark() *BinUpsertOne {
	return u.Update(func(s *BinUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *BinUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BinCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BinUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BinUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BinUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Save creates the Bin in the database.
func (u *BinUpsertOne) Save(ctx context.Context) (*Bin, error) {
	if len(u.create.conflict) == 0 {
		return nil, errors.New("ent: missing options for BinCreate.OnConflict")
	}
	return u.create.Save(ctx)
}

// BinCreateBulk is the builder for creating many Bin entities in bulk.
type BinCreateBulk struct {
	config
	builders []*BinCreate
	conflict []sql.ConflictOption
}

// Save creates the Bin entities in the database.
func (bcb *BinCreateBulk) Save(ctx context.Context) ([]*Bin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Bin, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BinCreateBulk) SaveX(ctx context.Context) []*Bin {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BinCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BinCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Bin.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BinUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (bcb *BinCreateBulk) OnConflict(opts ...sql.ConflictOption) *BinUpsertBulk {
	bcb.conflict = opts
	return &BinUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Bin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (bcb *BinCreateBulk) OnConflictColumns(columns ...string) *BinUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BinUpsertBulk{
		create: bcb,
	}
}

// BinUpsertBulk is the builder for "upsert"-ing
// a bulk of Bin nodes.
type BinUpsertBulk struct {
	create *BinCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Bin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *BinUpsertBulk) UpdateNewValues() *BinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(bin.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Bin.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *BinUpsertBulk) Ignore() *BinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BinUpsertBulk) DoNothing() *BinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BinCreateBulk.OnConflict
// documentation for more info.
func (u *BinUpsertBulk) Update(set func(*BinUpsert)) *BinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BinUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *BinUpsertBulk) SetUpdatedAt(v time.Time) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateUpdatedAt() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *BinUpsertBulk) SetCabinetID(v uint64) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateCabinetID() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateCabinetID()
	})
}

// SetSerial sets the "serial" field.
func (u *BinUpsertBulk) SetSerial(v string) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateSerial() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateSerial()
	})
}

// SetName sets the "name" field.
func (u *BinUpsertBulk) SetName(v string) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateName() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateName()
	})
}

// SetOrdinal sets the "ordinal" field.
func (u *BinUpsertBulk) SetOrdinal(v int) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetOrdinal(v)
	})
}

// AddOrdinal adds v to the "ordinal" field.
func (u *BinUpsertBulk) AddOrdinal(v int) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.AddOrdinal(v)
	})
}

// UpdateOrdinal sets the "ordinal" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateOrdinal() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateOrdinal()
	})
}

// SetOpen sets the "open" field.
func (u *BinUpsertBulk) SetOpen(v bool) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetOpen(v)
	})
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateOpen() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateOpen()
	})
}

// SetEnable sets the "enable" field.
func (u *BinUpsertBulk) SetEnable(v bool) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateEnable() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateEnable()
	})
}

// SetHealth sets the "health" field.
func (u *BinUpsertBulk) SetHealth(v bool) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetHealth(v)
	})
}

// UpdateHealth sets the "health" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateHealth() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateHealth()
	})
}

// SetBatteryExists sets the "battery_exists" field.
func (u *BinUpsertBulk) SetBatteryExists(v bool) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetBatteryExists(v)
	})
}

// UpdateBatteryExists sets the "battery_exists" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateBatteryExists() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateBatteryExists()
	})
}

// SetBatterySn sets the "battery_sn" field.
func (u *BinUpsertBulk) SetBatterySn(v string) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetBatterySn(v)
	})
}

// UpdateBatterySn sets the "battery_sn" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateBatterySn() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateBatterySn()
	})
}

// SetVoltage sets the "voltage" field.
func (u *BinUpsertBulk) SetVoltage(v float64) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *BinUpsertBulk) AddVoltage(v float64) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateVoltage() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateVoltage()
	})
}

// SetCurrent sets the "current" field.
func (u *BinUpsertBulk) SetCurrent(v float64) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetCurrent(v)
	})
}

// AddCurrent adds v to the "current" field.
func (u *BinUpsertBulk) AddCurrent(v float64) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.AddCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateCurrent() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateCurrent()
	})
}

// SetSoc sets the "soc" field.
func (u *BinUpsertBulk) SetSoc(v float64) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetSoc(v)
	})
}

// AddSoc adds v to the "soc" field.
func (u *BinUpsertBulk) AddSoc(v float64) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.AddSoc(v)
	})
}

// UpdateSoc sets the "soc" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateSoc() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateSoc()
	})
}

// SetSoh sets the "soh" field.
func (u *BinUpsertBulk) SetSoh(v float64) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetSoh(v)
	})
}

// AddSoh adds v to the "soh" field.
func (u *BinUpsertBulk) AddSoh(v float64) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.AddSoh(v)
	})
}

// UpdateSoh sets the "soh" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateSoh() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateSoh()
	})
}

// SetRemark sets the "remark" field.
func (u *BinUpsertBulk) SetRemark(v string) *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.SetRemark(v)
	})
}

// UpdateRemark sets the "remark" field to the value that was provided on create.
func (u *BinUpsertBulk) UpdateRemark() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.UpdateRemark()
	})
}

// ClearRemark clears the value of the "remark" field.
func (u *BinUpsertBulk) ClearRemark() *BinUpsertBulk {
	return u.Update(func(s *BinUpsert) {
		s.ClearRemark()
	})
}

// Exec executes the query.
func (u *BinUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BinCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BinCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BinUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
