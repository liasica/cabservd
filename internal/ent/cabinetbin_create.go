// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/cabservd/internal/ent/cabinetbin"
)

// CabinetBinCreate is the builder for creating a CabinetBin entity.
type CabinetBinCreate struct {
	config
	mutation *CabinetBinMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cbc *CabinetBinCreate) SetCreatedAt(t time.Time) *CabinetBinCreate {
	cbc.mutation.SetCreatedAt(t)
	return cbc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cbc *CabinetBinCreate) SetNillableCreatedAt(t *time.Time) *CabinetBinCreate {
	if t != nil {
		cbc.SetCreatedAt(*t)
	}
	return cbc
}

// SetUpdatedAt sets the "updated_at" field.
func (cbc *CabinetBinCreate) SetUpdatedAt(t time.Time) *CabinetBinCreate {
	cbc.mutation.SetUpdatedAt(t)
	return cbc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cbc *CabinetBinCreate) SetNillableUpdatedAt(t *time.Time) *CabinetBinCreate {
	if t != nil {
		cbc.SetUpdatedAt(*t)
	}
	return cbc
}

// SetBrand sets the "brand" field.
func (cbc *CabinetBinCreate) SetBrand(s string) *CabinetBinCreate {
	cbc.mutation.SetBrand(s)
	return cbc
}

// SetSn sets the "sn" field.
func (cbc *CabinetBinCreate) SetSn(s string) *CabinetBinCreate {
	cbc.mutation.SetSn(s)
	return cbc
}

// SetName sets the "name" field.
func (cbc *CabinetBinCreate) SetName(s string) *CabinetBinCreate {
	cbc.mutation.SetName(s)
	return cbc
}

// SetIndex sets the "index" field.
func (cbc *CabinetBinCreate) SetIndex(i int) *CabinetBinCreate {
	cbc.mutation.SetIndex(i)
	return cbc
}

// SetOpen sets the "open" field.
func (cbc *CabinetBinCreate) SetOpen(b bool) *CabinetBinCreate {
	cbc.mutation.SetOpen(b)
	return cbc
}

// SetBatterySn sets the "battery_sn" field.
func (cbc *CabinetBinCreate) SetBatterySn(s string) *CabinetBinCreate {
	cbc.mutation.SetBatterySn(s)
	return cbc
}

// SetNillableBatterySn sets the "battery_sn" field if the given value is not nil.
func (cbc *CabinetBinCreate) SetNillableBatterySn(s *string) *CabinetBinCreate {
	if s != nil {
		cbc.SetBatterySn(*s)
	}
	return cbc
}

// SetVoltage sets the "voltage" field.
func (cbc *CabinetBinCreate) SetVoltage(f float64) *CabinetBinCreate {
	cbc.mutation.SetVoltage(f)
	return cbc
}

// SetNillableVoltage sets the "voltage" field if the given value is not nil.
func (cbc *CabinetBinCreate) SetNillableVoltage(f *float64) *CabinetBinCreate {
	if f != nil {
		cbc.SetVoltage(*f)
	}
	return cbc
}

// SetCurrent sets the "current" field.
func (cbc *CabinetBinCreate) SetCurrent(f float64) *CabinetBinCreate {
	cbc.mutation.SetCurrent(f)
	return cbc
}

// SetNillableCurrent sets the "current" field if the given value is not nil.
func (cbc *CabinetBinCreate) SetNillableCurrent(f *float64) *CabinetBinCreate {
	if f != nil {
		cbc.SetCurrent(*f)
	}
	return cbc
}

// Mutation returns the CabinetBinMutation object of the builder.
func (cbc *CabinetBinCreate) Mutation() *CabinetBinMutation {
	return cbc.mutation
}

// Save creates the CabinetBin in the database.
func (cbc *CabinetBinCreate) Save(ctx context.Context) (*CabinetBin, error) {
	var (
		err  error
		node *CabinetBin
	)
	cbc.defaults()
	if len(cbc.hooks) == 0 {
		if err = cbc.check(); err != nil {
			return nil, err
		}
		node, err = cbc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CabinetBinMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cbc.check(); err != nil {
				return nil, err
			}
			cbc.mutation = mutation
			if node, err = cbc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cbc.hooks) - 1; i >= 0; i-- {
			if cbc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cbc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cbc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*CabinetBin)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from CabinetBinMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cbc *CabinetBinCreate) SaveX(ctx context.Context) *CabinetBin {
	v, err := cbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbc *CabinetBinCreate) Exec(ctx context.Context) error {
	_, err := cbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbc *CabinetBinCreate) ExecX(ctx context.Context) {
	if err := cbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cbc *CabinetBinCreate) defaults() {
	if _, ok := cbc.mutation.CreatedAt(); !ok {
		v := cabinetbin.DefaultCreatedAt()
		cbc.mutation.SetCreatedAt(v)
	}
	if _, ok := cbc.mutation.UpdatedAt(); !ok {
		v := cabinetbin.DefaultUpdatedAt()
		cbc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cbc *CabinetBinCreate) check() error {
	if _, ok := cbc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "CabinetBin.created_at"`)}
	}
	if _, ok := cbc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "CabinetBin.updated_at"`)}
	}
	if _, ok := cbc.mutation.Brand(); !ok {
		return &ValidationError{Name: "brand", err: errors.New(`ent: missing required field "CabinetBin.brand"`)}
	}
	if _, ok := cbc.mutation.Sn(); !ok {
		return &ValidationError{Name: "sn", err: errors.New(`ent: missing required field "CabinetBin.sn"`)}
	}
	if _, ok := cbc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "CabinetBin.name"`)}
	}
	if _, ok := cbc.mutation.Index(); !ok {
		return &ValidationError{Name: "index", err: errors.New(`ent: missing required field "CabinetBin.index"`)}
	}
	if _, ok := cbc.mutation.Open(); !ok {
		return &ValidationError{Name: "open", err: errors.New(`ent: missing required field "CabinetBin.open"`)}
	}
	return nil
}

func (cbc *CabinetBinCreate) sqlSave(ctx context.Context) (*CabinetBin, error) {
	_node, _spec := cbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	return _node, nil
}

func (cbc *CabinetBinCreate) createSpec() (*CabinetBin, *sqlgraph.CreateSpec) {
	var (
		_node = &CabinetBin{config: cbc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cabinetbin.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinetbin.FieldID,
			},
		}
	)
	_spec.OnConflict = cbc.conflict
	if value, ok := cbc.mutation.CreatedAt(); ok {
		_spec.SetField(cabinetbin.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cbc.mutation.UpdatedAt(); ok {
		_spec.SetField(cabinetbin.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cbc.mutation.Brand(); ok {
		_spec.SetField(cabinetbin.FieldBrand, field.TypeString, value)
		_node.Brand = value
	}
	if value, ok := cbc.mutation.Sn(); ok {
		_spec.SetField(cabinetbin.FieldSn, field.TypeString, value)
		_node.Sn = value
	}
	if value, ok := cbc.mutation.Name(); ok {
		_spec.SetField(cabinetbin.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := cbc.mutation.Index(); ok {
		_spec.SetField(cabinetbin.FieldIndex, field.TypeInt, value)
		_node.Index = value
	}
	if value, ok := cbc.mutation.Open(); ok {
		_spec.SetField(cabinetbin.FieldOpen, field.TypeBool, value)
		_node.Open = value
	}
	if value, ok := cbc.mutation.BatterySn(); ok {
		_spec.SetField(cabinetbin.FieldBatterySn, field.TypeString, value)
		_node.BatterySn = &value
	}
	if value, ok := cbc.mutation.Voltage(); ok {
		_spec.SetField(cabinetbin.FieldVoltage, field.TypeFloat64, value)
		_node.Voltage = &value
	}
	if value, ok := cbc.mutation.Current(); ok {
		_spec.SetField(cabinetbin.FieldCurrent, field.TypeFloat64, value)
		_node.Current = &value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CabinetBin.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetBinUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cbc *CabinetBinCreate) OnConflict(opts ...sql.ConflictOption) *CabinetBinUpsertOne {
	cbc.conflict = opts
	return &CabinetBinUpsertOne{
		create: cbc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CabinetBin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cbc *CabinetBinCreate) OnConflictColumns(columns ...string) *CabinetBinUpsertOne {
	cbc.conflict = append(cbc.conflict, sql.ConflictColumns(columns...))
	return &CabinetBinUpsertOne{
		create: cbc,
	}
}

type (
	// CabinetBinUpsertOne is the builder for "upsert"-ing
	//  one CabinetBin node.
	CabinetBinUpsertOne struct {
		create *CabinetBinCreate
	}

	// CabinetBinUpsert is the "OnConflict" setter.
	CabinetBinUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetBinUpsert) SetUpdatedAt(v time.Time) *CabinetBinUpsert {
	u.Set(cabinetbin.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetBinUpsert) UpdateUpdatedAt() *CabinetBinUpsert {
	u.SetExcluded(cabinetbin.FieldUpdatedAt)
	return u
}

// SetBrand sets the "brand" field.
func (u *CabinetBinUpsert) SetBrand(v string) *CabinetBinUpsert {
	u.Set(cabinetbin.FieldBrand, v)
	return u
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *CabinetBinUpsert) UpdateBrand() *CabinetBinUpsert {
	u.SetExcluded(cabinetbin.FieldBrand)
	return u
}

// SetSn sets the "sn" field.
func (u *CabinetBinUpsert) SetSn(v string) *CabinetBinUpsert {
	u.Set(cabinetbin.FieldSn, v)
	return u
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *CabinetBinUpsert) UpdateSn() *CabinetBinUpsert {
	u.SetExcluded(cabinetbin.FieldSn)
	return u
}

// SetName sets the "name" field.
func (u *CabinetBinUpsert) SetName(v string) *CabinetBinUpsert {
	u.Set(cabinetbin.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CabinetBinUpsert) UpdateName() *CabinetBinUpsert {
	u.SetExcluded(cabinetbin.FieldName)
	return u
}

// SetIndex sets the "index" field.
func (u *CabinetBinUpsert) SetIndex(v int) *CabinetBinUpsert {
	u.Set(cabinetbin.FieldIndex, v)
	return u
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *CabinetBinUpsert) UpdateIndex() *CabinetBinUpsert {
	u.SetExcluded(cabinetbin.FieldIndex)
	return u
}

// AddIndex adds v to the "index" field.
func (u *CabinetBinUpsert) AddIndex(v int) *CabinetBinUpsert {
	u.Add(cabinetbin.FieldIndex, v)
	return u
}

// SetOpen sets the "open" field.
func (u *CabinetBinUpsert) SetOpen(v bool) *CabinetBinUpsert {
	u.Set(cabinetbin.FieldOpen, v)
	return u
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *CabinetBinUpsert) UpdateOpen() *CabinetBinUpsert {
	u.SetExcluded(cabinetbin.FieldOpen)
	return u
}

// SetBatterySn sets the "battery_sn" field.
func (u *CabinetBinUpsert) SetBatterySn(v string) *CabinetBinUpsert {
	u.Set(cabinetbin.FieldBatterySn, v)
	return u
}

// UpdateBatterySn sets the "battery_sn" field to the value that was provided on create.
func (u *CabinetBinUpsert) UpdateBatterySn() *CabinetBinUpsert {
	u.SetExcluded(cabinetbin.FieldBatterySn)
	return u
}

// ClearBatterySn clears the value of the "battery_sn" field.
func (u *CabinetBinUpsert) ClearBatterySn() *CabinetBinUpsert {
	u.SetNull(cabinetbin.FieldBatterySn)
	return u
}

// SetVoltage sets the "voltage" field.
func (u *CabinetBinUpsert) SetVoltage(v float64) *CabinetBinUpsert {
	u.Set(cabinetbin.FieldVoltage, v)
	return u
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *CabinetBinUpsert) UpdateVoltage() *CabinetBinUpsert {
	u.SetExcluded(cabinetbin.FieldVoltage)
	return u
}

// AddVoltage adds v to the "voltage" field.
func (u *CabinetBinUpsert) AddVoltage(v float64) *CabinetBinUpsert {
	u.Add(cabinetbin.FieldVoltage, v)
	return u
}

// ClearVoltage clears the value of the "voltage" field.
func (u *CabinetBinUpsert) ClearVoltage() *CabinetBinUpsert {
	u.SetNull(cabinetbin.FieldVoltage)
	return u
}

// SetCurrent sets the "current" field.
func (u *CabinetBinUpsert) SetCurrent(v float64) *CabinetBinUpsert {
	u.Set(cabinetbin.FieldCurrent, v)
	return u
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *CabinetBinUpsert) UpdateCurrent() *CabinetBinUpsert {
	u.SetExcluded(cabinetbin.FieldCurrent)
	return u
}

// AddCurrent adds v to the "current" field.
func (u *CabinetBinUpsert) AddCurrent(v float64) *CabinetBinUpsert {
	u.Add(cabinetbin.FieldCurrent, v)
	return u
}

// ClearCurrent clears the value of the "current" field.
func (u *CabinetBinUpsert) ClearCurrent() *CabinetBinUpsert {
	u.SetNull(cabinetbin.FieldCurrent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.CabinetBin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CabinetBinUpsertOne) UpdateNewValues() *CabinetBinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(cabinetbin.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CabinetBin.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CabinetBinUpsertOne) Ignore() *CabinetBinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetBinUpsertOne) DoNothing() *CabinetBinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetBinCreate.OnConflict
// documentation for more info.
func (u *CabinetBinUpsertOne) Update(set func(*CabinetBinUpsert)) *CabinetBinUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetBinUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetBinUpsertOne) SetUpdatedAt(v time.Time) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetBinUpsertOne) UpdateUpdatedAt() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBrand sets the "brand" field.
func (u *CabinetBinUpsertOne) SetBrand(v string) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetBrand(v)
	})
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *CabinetBinUpsertOne) UpdateBrand() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateBrand()
	})
}

// SetSn sets the "sn" field.
func (u *CabinetBinUpsertOne) SetSn(v string) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *CabinetBinUpsertOne) UpdateSn() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateSn()
	})
}

// SetName sets the "name" field.
func (u *CabinetBinUpsertOne) SetName(v string) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CabinetBinUpsertOne) UpdateName() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateName()
	})
}

// SetIndex sets the "index" field.
func (u *CabinetBinUpsertOne) SetIndex(v int) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *CabinetBinUpsertOne) AddIndex(v int) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *CabinetBinUpsertOne) UpdateIndex() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateIndex()
	})
}

// SetOpen sets the "open" field.
func (u *CabinetBinUpsertOne) SetOpen(v bool) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetOpen(v)
	})
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *CabinetBinUpsertOne) UpdateOpen() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateOpen()
	})
}

// SetBatterySn sets the "battery_sn" field.
func (u *CabinetBinUpsertOne) SetBatterySn(v string) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetBatterySn(v)
	})
}

// UpdateBatterySn sets the "battery_sn" field to the value that was provided on create.
func (u *CabinetBinUpsertOne) UpdateBatterySn() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateBatterySn()
	})
}

// ClearBatterySn clears the value of the "battery_sn" field.
func (u *CabinetBinUpsertOne) ClearBatterySn() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.ClearBatterySn()
	})
}

// SetVoltage sets the "voltage" field.
func (u *CabinetBinUpsertOne) SetVoltage(v float64) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *CabinetBinUpsertOne) AddVoltage(v float64) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *CabinetBinUpsertOne) UpdateVoltage() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateVoltage()
	})
}

// ClearVoltage clears the value of the "voltage" field.
func (u *CabinetBinUpsertOne) ClearVoltage() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.ClearVoltage()
	})
}

// SetCurrent sets the "current" field.
func (u *CabinetBinUpsertOne) SetCurrent(v float64) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetCurrent(v)
	})
}

// AddCurrent adds v to the "current" field.
func (u *CabinetBinUpsertOne) AddCurrent(v float64) *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.AddCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *CabinetBinUpsertOne) UpdateCurrent() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateCurrent()
	})
}

// ClearCurrent clears the value of the "current" field.
func (u *CabinetBinUpsertOne) ClearCurrent() *CabinetBinUpsertOne {
	return u.Update(func(s *CabinetBinUpsert) {
		s.ClearCurrent()
	})
}

// Exec executes the query.
func (u *CabinetBinUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetBinCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetBinUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CabinetBinUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CabinetBinUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Save creates the CabinetBin in the database.
func (u *CabinetBinUpsertOne) Save(ctx context.Context) (*CabinetBin, error) {
	if len(u.create.conflict) == 0 {
		return nil, errors.New("ent: missing options for CabinetBinCreate.OnConflict")
	}
	return u.create.Save(ctx)
}

// CabinetBinCreateBulk is the builder for creating many CabinetBin entities in bulk.
type CabinetBinCreateBulk struct {
	config
	builders []*CabinetBinCreate
	conflict []sql.ConflictOption
}

// Save creates the CabinetBin entities in the database.
func (cbcb *CabinetBinCreateBulk) Save(ctx context.Context) ([]*CabinetBin, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cbcb.builders))
	nodes := make([]*CabinetBin, len(cbcb.builders))
	mutators := make([]Mutator, len(cbcb.builders))
	for i := range cbcb.builders {
		func(i int, root context.Context) {
			builder := cbcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CabinetBinMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = cbcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cbcb *CabinetBinCreateBulk) SaveX(ctx context.Context) []*CabinetBin {
	v, err := cbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cbcb *CabinetBinCreateBulk) Exec(ctx context.Context) error {
	_, err := cbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cbcb *CabinetBinCreateBulk) ExecX(ctx context.Context) {
	if err := cbcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.CabinetBin.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetBinUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cbcb *CabinetBinCreateBulk) OnConflict(opts ...sql.ConflictOption) *CabinetBinUpsertBulk {
	cbcb.conflict = opts
	return &CabinetBinUpsertBulk{
		create: cbcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.CabinetBin.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cbcb *CabinetBinCreateBulk) OnConflictColumns(columns ...string) *CabinetBinUpsertBulk {
	cbcb.conflict = append(cbcb.conflict, sql.ConflictColumns(columns...))
	return &CabinetBinUpsertBulk{
		create: cbcb,
	}
}

// CabinetBinUpsertBulk is the builder for "upsert"-ing
// a bulk of CabinetBin nodes.
type CabinetBinUpsertBulk struct {
	create *CabinetBinCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.CabinetBin.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CabinetBinUpsertBulk) UpdateNewValues() *CabinetBinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(cabinetbin.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.CabinetBin.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CabinetBinUpsertBulk) Ignore() *CabinetBinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetBinUpsertBulk) DoNothing() *CabinetBinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetBinCreateBulk.OnConflict
// documentation for more info.
func (u *CabinetBinUpsertBulk) Update(set func(*CabinetBinUpsert)) *CabinetBinUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetBinUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetBinUpsertBulk) SetUpdatedAt(v time.Time) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetBinUpsertBulk) UpdateUpdatedAt() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetBrand sets the "brand" field.
func (u *CabinetBinUpsertBulk) SetBrand(v string) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetBrand(v)
	})
}

// UpdateBrand sets the "brand" field to the value that was provided on create.
func (u *CabinetBinUpsertBulk) UpdateBrand() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateBrand()
	})
}

// SetSn sets the "sn" field.
func (u *CabinetBinUpsertBulk) SetSn(v string) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetSn(v)
	})
}

// UpdateSn sets the "sn" field to the value that was provided on create.
func (u *CabinetBinUpsertBulk) UpdateSn() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateSn()
	})
}

// SetName sets the "name" field.
func (u *CabinetBinUpsertBulk) SetName(v string) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *CabinetBinUpsertBulk) UpdateName() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateName()
	})
}

// SetIndex sets the "index" field.
func (u *CabinetBinUpsertBulk) SetIndex(v int) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetIndex(v)
	})
}

// AddIndex adds v to the "index" field.
func (u *CabinetBinUpsertBulk) AddIndex(v int) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.AddIndex(v)
	})
}

// UpdateIndex sets the "index" field to the value that was provided on create.
func (u *CabinetBinUpsertBulk) UpdateIndex() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateIndex()
	})
}

// SetOpen sets the "open" field.
func (u *CabinetBinUpsertBulk) SetOpen(v bool) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetOpen(v)
	})
}

// UpdateOpen sets the "open" field to the value that was provided on create.
func (u *CabinetBinUpsertBulk) UpdateOpen() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateOpen()
	})
}

// SetBatterySn sets the "battery_sn" field.
func (u *CabinetBinUpsertBulk) SetBatterySn(v string) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetBatterySn(v)
	})
}

// UpdateBatterySn sets the "battery_sn" field to the value that was provided on create.
func (u *CabinetBinUpsertBulk) UpdateBatterySn() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateBatterySn()
	})
}

// ClearBatterySn clears the value of the "battery_sn" field.
func (u *CabinetBinUpsertBulk) ClearBatterySn() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.ClearBatterySn()
	})
}

// SetVoltage sets the "voltage" field.
func (u *CabinetBinUpsertBulk) SetVoltage(v float64) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *CabinetBinUpsertBulk) AddVoltage(v float64) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *CabinetBinUpsertBulk) UpdateVoltage() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateVoltage()
	})
}

// ClearVoltage clears the value of the "voltage" field.
func (u *CabinetBinUpsertBulk) ClearVoltage() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.ClearVoltage()
	})
}

// SetCurrent sets the "current" field.
func (u *CabinetBinUpsertBulk) SetCurrent(v float64) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.SetCurrent(v)
	})
}

// AddCurrent adds v to the "current" field.
func (u *CabinetBinUpsertBulk) AddCurrent(v float64) *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.AddCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *CabinetBinUpsertBulk) UpdateCurrent() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.UpdateCurrent()
	})
}

// ClearCurrent clears the value of the "current" field.
func (u *CabinetBinUpsertBulk) ClearCurrent() *CabinetBinUpsertBulk {
	return u.Update(func(s *CabinetBinUpsert) {
		s.ClearCurrent()
	})
}

// Exec executes the query.
func (u *CabinetBinUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CabinetBinCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetBinCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetBinUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
