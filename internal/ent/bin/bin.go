// Code generated by ent, DO NOT EDIT.

package bin

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the bin type in the database.
	Label = "bin"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCabinetID holds the string denoting the cabinet_id field in the database.
	FieldCabinetID = "cabinet_id"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldOrdinal holds the string denoting the ordinal field in the database.
	FieldOrdinal = "ordinal"
	// FieldOpen holds the string denoting the open field in the database.
	FieldOpen = "open"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldHealth holds the string denoting the health field in the database.
	FieldHealth = "health"
	// FieldBatteryExists holds the string denoting the battery_exists field in the database.
	FieldBatteryExists = "battery_exists"
	// FieldBatterySn holds the string denoting the battery_sn field in the database.
	FieldBatterySn = "battery_sn"
	// FieldVoltage holds the string denoting the voltage field in the database.
	FieldVoltage = "voltage"
	// FieldCurrent holds the string denoting the current field in the database.
	FieldCurrent = "current"
	// FieldSoc holds the string denoting the soc field in the database.
	FieldSoc = "soc"
	// FieldSoh holds the string denoting the soh field in the database.
	FieldSoh = "soh"
	// FieldRemark holds the string denoting the remark field in the database.
	FieldRemark = "remark"
	// FieldDeactivate holds the string denoting the deactivate field in the database.
	FieldDeactivate = "deactivate"
	// FieldDeactivateReason holds the string denoting the deactivate_reason field in the database.
	FieldDeactivateReason = "deactivate_reason"
	// EdgeCabinet holds the string denoting the cabinet edge name in mutations.
	EdgeCabinet = "cabinet"
	// Table holds the table name of the bin in the database.
	Table = "bin"
	// CabinetTable is the table that holds the cabinet relation/edge.
	CabinetTable = "bin"
	// CabinetInverseTable is the table name for the Cabinet entity.
	// It exists in this package in order to avoid circular dependency with the "cabinet" package.
	CabinetInverseTable = "cabinet"
	// CabinetColumn is the table column denoting the cabinet relation/edge.
	CabinetColumn = "cabinet_id"
)

// Columns holds all SQL columns for bin fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCabinetID,
	FieldSerial,
	FieldName,
	FieldOrdinal,
	FieldOpen,
	FieldEnable,
	FieldHealth,
	FieldBatteryExists,
	FieldBatterySn,
	FieldVoltage,
	FieldCurrent,
	FieldSoc,
	FieldSoh,
	FieldRemark,
	FieldDeactivate,
	FieldDeactivateReason,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultOpen holds the default value on creation for the "open" field.
	DefaultOpen bool
	// DefaultEnable holds the default value on creation for the "enable" field.
	DefaultEnable bool
	// DefaultHealth holds the default value on creation for the "health" field.
	DefaultHealth bool
	// DefaultBatteryExists holds the default value on creation for the "battery_exists" field.
	DefaultBatteryExists bool
	// DefaultBatterySn holds the default value on creation for the "battery_sn" field.
	DefaultBatterySn string
	// DefaultVoltage holds the default value on creation for the "voltage" field.
	DefaultVoltage float64
	// DefaultCurrent holds the default value on creation for the "current" field.
	DefaultCurrent float64
	// DefaultSoc holds the default value on creation for the "soc" field.
	DefaultSoc float64
	// DefaultSoh holds the default value on creation for the "soh" field.
	DefaultSoh float64
	// DefaultDeactivate holds the default value on creation for the "deactivate" field.
	DefaultDeactivate bool
)

// OrderOption defines the ordering options for the Bin queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCabinetID orders the results by the cabinet_id field.
func ByCabinetID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCabinetID, opts...).ToFunc()
}

// BySerial orders the results by the serial field.
func BySerial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerial, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByOrdinal orders the results by the ordinal field.
func ByOrdinal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOrdinal, opts...).ToFunc()
}

// ByOpen orders the results by the open field.
func ByOpen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpen, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// ByHealth orders the results by the health field.
func ByHealth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHealth, opts...).ToFunc()
}

// ByBatteryExists orders the results by the battery_exists field.
func ByBatteryExists(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatteryExists, opts...).ToFunc()
}

// ByBatterySn orders the results by the battery_sn field.
func ByBatterySn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBatterySn, opts...).ToFunc()
}

// ByVoltage orders the results by the voltage field.
func ByVoltage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoltage, opts...).ToFunc()
}

// ByCurrent orders the results by the current field.
func ByCurrent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrent, opts...).ToFunc()
}

// BySoc orders the results by the soc field.
func BySoc(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSoc, opts...).ToFunc()
}

// BySoh orders the results by the soh field.
func BySoh(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSoh, opts...).ToFunc()
}

// ByRemark orders the results by the remark field.
func ByRemark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRemark, opts...).ToFunc()
}

// ByDeactivate orders the results by the deactivate field.
func ByDeactivate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeactivate, opts...).ToFunc()
}

// ByDeactivateReason orders the results by the deactivate_reason field.
func ByDeactivateReason(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeactivateReason, opts...).ToFunc()
}

// ByCabinetField orders the results by cabinet field.
func ByCabinetField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCabinetStep(), sql.OrderByField(field, opts...))
	}
}
func newCabinetStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CabinetInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, CabinetTable, CabinetColumn),
	)
}
