// Code generated by ent, DO NOT EDIT.

package console

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/cabservd/internal/ent/predicate"
	"github.com/auroraride/cabservd/internal/types"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CabinetID applies equality check predicate on the "cabinet_id" field. It's identical to CabinetIDEQ.
func CabinetID(v uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCabinetID), v))
	})
}

// BinID applies equality check predicate on the "bin_id" field. It's identical to BinIDEQ.
func BinID(v uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBinID), v))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// Step applies equality check predicate on the "step" field. It's identical to StepEQ.
func Step(v types.ExchangeStep) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStep), v))
	})
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// StartAt applies equality check predicate on the "startAt" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StopAt applies equality check predicate on the "stopAt" field. It's identical to StopAtEQ.
func StopAt(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStopAt), v))
	})
}

// CabinetIDEQ applies the EQ predicate on the "cabinet_id" field.
func CabinetIDEQ(v uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCabinetID), v))
	})
}

// CabinetIDNEQ applies the NEQ predicate on the "cabinet_id" field.
func CabinetIDNEQ(v uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCabinetID), v))
	})
}

// CabinetIDIn applies the In predicate on the "cabinet_id" field.
func CabinetIDIn(vs ...uint64) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCabinetID), v...))
	})
}

// CabinetIDNotIn applies the NotIn predicate on the "cabinet_id" field.
func CabinetIDNotIn(vs ...uint64) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCabinetID), v...))
	})
}

// BinIDEQ applies the EQ predicate on the "bin_id" field.
func BinIDEQ(v uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBinID), v))
	})
}

// BinIDNEQ applies the NEQ predicate on the "bin_id" field.
func BinIDNEQ(v uint64) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBinID), v))
	})
}

// BinIDIn applies the In predicate on the "bin_id" field.
func BinIDIn(vs ...uint64) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBinID), v...))
	})
}

// BinIDNotIn applies the NotIn predicate on the "bin_id" field.
func BinIDNotIn(vs ...uint64) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBinID), v...))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// StepEQ applies the EQ predicate on the "step" field.
func StepEQ(v types.ExchangeStep) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStep), v))
	})
}

// StepNEQ applies the NEQ predicate on the "step" field.
func StepNEQ(v types.ExchangeStep) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStep), v))
	})
}

// StepIn applies the In predicate on the "step" field.
func StepIn(vs ...types.ExchangeStep) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStep), v...))
	})
}

// StepNotIn applies the NotIn predicate on the "step" field.
func StepNotIn(vs ...types.ExchangeStep) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStep), v...))
	})
}

// StepGT applies the GT predicate on the "step" field.
func StepGT(v types.ExchangeStep) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStep), v))
	})
}

// StepGTE applies the GTE predicate on the "step" field.
func StepGTE(v types.ExchangeStep) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStep), v))
	})
}

// StepLT applies the LT predicate on the "step" field.
func StepLT(v types.ExchangeStep) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStep), v))
	})
}

// StepLTE applies the LTE predicate on the "step" field.
func StepLTE(v types.ExchangeStep) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStep), v))
	})
}

// StepIsNil applies the IsNil predicate on the "step" field.
func StepIsNil() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStep)))
	})
}

// StepNotNil applies the NotNil predicate on the "step" field.
func StepNotNil() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStep)))
	})
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStatus), v))
	})
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStatus), v))
	})
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStatus), v...))
	})
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStatus), v...))
	})
}

// BeforeBinIsNil applies the IsNil predicate on the "before_bin" field.
func BeforeBinIsNil() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBeforeBin)))
	})
}

// BeforeBinNotNil applies the NotNil predicate on the "before_bin" field.
func BeforeBinNotNil() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBeforeBin)))
	})
}

// AfterBinIsNil applies the IsNil predicate on the "after_bin" field.
func AfterBinIsNil() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAfterBin)))
	})
}

// AfterBinNotNil applies the NotNil predicate on the "after_bin" field.
func AfterBinNotNil() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAfterBin)))
	})
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMessage), v))
	})
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMessage), v))
	})
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMessage), v...))
	})
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMessage), v...))
	})
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMessage), v))
	})
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMessage), v))
	})
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMessage), v))
	})
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMessage), v))
	})
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMessage), v))
	})
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMessage), v))
	})
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMessage), v))
	})
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMessage)))
	})
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMessage)))
	})
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMessage), v))
	})
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMessage), v))
	})
}

// StartAtEQ applies the EQ predicate on the "startAt" field.
func StartAtEQ(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartAt), v))
	})
}

// StartAtNEQ applies the NEQ predicate on the "startAt" field.
func StartAtNEQ(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartAt), v))
	})
}

// StartAtIn applies the In predicate on the "startAt" field.
func StartAtIn(vs ...time.Time) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartAt), v...))
	})
}

// StartAtNotIn applies the NotIn predicate on the "startAt" field.
func StartAtNotIn(vs ...time.Time) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartAt), v...))
	})
}

// StartAtGT applies the GT predicate on the "startAt" field.
func StartAtGT(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartAt), v))
	})
}

// StartAtGTE applies the GTE predicate on the "startAt" field.
func StartAtGTE(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartAt), v))
	})
}

// StartAtLT applies the LT predicate on the "startAt" field.
func StartAtLT(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartAt), v))
	})
}

// StartAtLTE applies the LTE predicate on the "startAt" field.
func StartAtLTE(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartAt), v))
	})
}

// StopAtEQ applies the EQ predicate on the "stopAt" field.
func StopAtEQ(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStopAt), v))
	})
}

// StopAtNEQ applies the NEQ predicate on the "stopAt" field.
func StopAtNEQ(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStopAt), v))
	})
}

// StopAtIn applies the In predicate on the "stopAt" field.
func StopAtIn(vs ...time.Time) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStopAt), v...))
	})
}

// StopAtNotIn applies the NotIn predicate on the "stopAt" field.
func StopAtNotIn(vs ...time.Time) predicate.Console {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStopAt), v...))
	})
}

// StopAtGT applies the GT predicate on the "stopAt" field.
func StopAtGT(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStopAt), v))
	})
}

// StopAtGTE applies the GTE predicate on the "stopAt" field.
func StopAtGTE(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStopAt), v))
	})
}

// StopAtLT applies the LT predicate on the "stopAt" field.
func StopAtLT(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStopAt), v))
	})
}

// StopAtLTE applies the LTE predicate on the "stopAt" field.
func StopAtLTE(v time.Time) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStopAt), v))
	})
}

// StopAtIsNil applies the IsNil predicate on the "stopAt" field.
func StopAtIsNil() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStopAt)))
	})
}

// StopAtNotNil applies the NotNil predicate on the "stopAt" field.
func StopAtNotNil() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStopAt)))
	})
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CabinetTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CabinetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBin applies the HasEdge predicate on the "bin" edge.
func HasBin() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BinTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BinTable, BinColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBinWith applies the HasEdge predicate on the "bin" edge with a given conditions (other predicates).
func HasBinWith(preds ...predicate.Bin) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BinInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BinTable, BinColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Console) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Console) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Console) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		p(s.Not())
	})
}
