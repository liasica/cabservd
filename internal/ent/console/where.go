// Code generated by ent, DO NOT EDIT.

package console

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/auroraride/adapter"
	"github.com/auroraride/adapter/defs/cabdef"
	"github.com/auroraride/cabservd/internal/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldID, id))
}

// CabinetID applies equality check predicate on the "cabinet_id" field. It's identical to CabinetIDEQ.
func CabinetID(v uint64) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldCabinetID, v))
}

// BinID applies equality check predicate on the "bin_id" field. It's identical to BinIDEQ.
func BinID(v uint64) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldBinID, v))
}

// Operate applies equality check predicate on the "operate" field. It's identical to OperateEQ.
func Operate(v cabdef.Operate) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldOperate, v))
}

// Serial applies equality check predicate on the "serial" field. It's identical to SerialEQ.
func Serial(v string) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldSerial, v))
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldUUID, v))
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v string) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldUserID, v))
}

// UserType applies equality check predicate on the "user_type" field. It's identical to UserTypeEQ.
func UserType(v adapter.UserType) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldUserType, v))
}

// Step applies equality check predicate on the "step" field. It's identical to StepEQ.
func Step(v int) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldStep, v))
}

// Message applies equality check predicate on the "message" field. It's identical to MessageEQ.
func Message(v string) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldMessage, v))
}

// StartAt applies equality check predicate on the "startAt" field. It's identical to StartAtEQ.
func StartAt(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldStartAt, v))
}

// StopAt applies equality check predicate on the "stopAt" field. It's identical to StopAtEQ.
func StopAt(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldStopAt, v))
}

// Duration applies equality check predicate on the "duration" field. It's identical to DurationEQ.
func Duration(v float64) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldDuration, v))
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldRemark, v))
}

// CabinetIDEQ applies the EQ predicate on the "cabinet_id" field.
func CabinetIDEQ(v uint64) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldCabinetID, v))
}

// CabinetIDNEQ applies the NEQ predicate on the "cabinet_id" field.
func CabinetIDNEQ(v uint64) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldCabinetID, v))
}

// CabinetIDIn applies the In predicate on the "cabinet_id" field.
func CabinetIDIn(vs ...uint64) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldCabinetID, vs...))
}

// CabinetIDNotIn applies the NotIn predicate on the "cabinet_id" field.
func CabinetIDNotIn(vs ...uint64) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldCabinetID, vs...))
}

// BinIDEQ applies the EQ predicate on the "bin_id" field.
func BinIDEQ(v uint64) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldBinID, v))
}

// BinIDNEQ applies the NEQ predicate on the "bin_id" field.
func BinIDNEQ(v uint64) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldBinID, v))
}

// BinIDIn applies the In predicate on the "bin_id" field.
func BinIDIn(vs ...uint64) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldBinID, vs...))
}

// BinIDNotIn applies the NotIn predicate on the "bin_id" field.
func BinIDNotIn(vs ...uint64) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldBinID, vs...))
}

// BinIDIsNil applies the IsNil predicate on the "bin_id" field.
func BinIDIsNil() predicate.Console {
	return predicate.Console(sql.FieldIsNull(FieldBinID))
}

// BinIDNotNil applies the NotNil predicate on the "bin_id" field.
func BinIDNotNil() predicate.Console {
	return predicate.Console(sql.FieldNotNull(FieldBinID))
}

// OperateEQ applies the EQ predicate on the "operate" field.
func OperateEQ(v cabdef.Operate) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldOperate, v))
}

// OperateNEQ applies the NEQ predicate on the "operate" field.
func OperateNEQ(v cabdef.Operate) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldOperate, v))
}

// OperateIn applies the In predicate on the "operate" field.
func OperateIn(vs ...cabdef.Operate) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldOperate, vs...))
}

// OperateNotIn applies the NotIn predicate on the "operate" field.
func OperateNotIn(vs ...cabdef.Operate) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldOperate, vs...))
}

// OperateGT applies the GT predicate on the "operate" field.
func OperateGT(v cabdef.Operate) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldOperate, v))
}

// OperateGTE applies the GTE predicate on the "operate" field.
func OperateGTE(v cabdef.Operate) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldOperate, v))
}

// OperateLT applies the LT predicate on the "operate" field.
func OperateLT(v cabdef.Operate) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldOperate, v))
}

// OperateLTE applies the LTE predicate on the "operate" field.
func OperateLTE(v cabdef.Operate) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldOperate, v))
}

// SerialEQ applies the EQ predicate on the "serial" field.
func SerialEQ(v string) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldSerial, v))
}

// SerialNEQ applies the NEQ predicate on the "serial" field.
func SerialNEQ(v string) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldSerial, v))
}

// SerialIn applies the In predicate on the "serial" field.
func SerialIn(vs ...string) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldSerial, vs...))
}

// SerialNotIn applies the NotIn predicate on the "serial" field.
func SerialNotIn(vs ...string) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldSerial, vs...))
}

// SerialGT applies the GT predicate on the "serial" field.
func SerialGT(v string) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldSerial, v))
}

// SerialGTE applies the GTE predicate on the "serial" field.
func SerialGTE(v string) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldSerial, v))
}

// SerialLT applies the LT predicate on the "serial" field.
func SerialLT(v string) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldSerial, v))
}

// SerialLTE applies the LTE predicate on the "serial" field.
func SerialLTE(v string) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldSerial, v))
}

// SerialContains applies the Contains predicate on the "serial" field.
func SerialContains(v string) predicate.Console {
	return predicate.Console(sql.FieldContains(FieldSerial, v))
}

// SerialHasPrefix applies the HasPrefix predicate on the "serial" field.
func SerialHasPrefix(v string) predicate.Console {
	return predicate.Console(sql.FieldHasPrefix(FieldSerial, v))
}

// SerialHasSuffix applies the HasSuffix predicate on the "serial" field.
func SerialHasSuffix(v string) predicate.Console {
	return predicate.Console(sql.FieldHasSuffix(FieldSerial, v))
}

// SerialEqualFold applies the EqualFold predicate on the "serial" field.
func SerialEqualFold(v string) predicate.Console {
	return predicate.Console(sql.FieldEqualFold(FieldSerial, v))
}

// SerialContainsFold applies the ContainsFold predicate on the "serial" field.
func SerialContainsFold(v string) predicate.Console {
	return predicate.Console(sql.FieldContainsFold(FieldSerial, v))
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldUUID, v))
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldUUID, v))
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldUUID, vs...))
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldUUID, vs...))
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldUUID, v))
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldUUID, v))
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldUUID, v))
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldUUID, v))
}

// BusinessEQ applies the EQ predicate on the "business" field.
func BusinessEQ(v adapter.Business) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldBusiness, v))
}

// BusinessNEQ applies the NEQ predicate on the "business" field.
func BusinessNEQ(v adapter.Business) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldBusiness, v))
}

// BusinessIn applies the In predicate on the "business" field.
func BusinessIn(vs ...adapter.Business) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldBusiness, vs...))
}

// BusinessNotIn applies the NotIn predicate on the "business" field.
func BusinessNotIn(vs ...adapter.Business) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldBusiness, vs...))
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v string) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldUserID, v))
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v string) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldUserID, v))
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...string) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldUserID, vs...))
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...string) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldUserID, vs...))
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v string) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldUserID, v))
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v string) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldUserID, v))
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v string) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldUserID, v))
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v string) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldUserID, v))
}

// UserIDContains applies the Contains predicate on the "user_id" field.
func UserIDContains(v string) predicate.Console {
	return predicate.Console(sql.FieldContains(FieldUserID, v))
}

// UserIDHasPrefix applies the HasPrefix predicate on the "user_id" field.
func UserIDHasPrefix(v string) predicate.Console {
	return predicate.Console(sql.FieldHasPrefix(FieldUserID, v))
}

// UserIDHasSuffix applies the HasSuffix predicate on the "user_id" field.
func UserIDHasSuffix(v string) predicate.Console {
	return predicate.Console(sql.FieldHasSuffix(FieldUserID, v))
}

// UserIDEqualFold applies the EqualFold predicate on the "user_id" field.
func UserIDEqualFold(v string) predicate.Console {
	return predicate.Console(sql.FieldEqualFold(FieldUserID, v))
}

// UserIDContainsFold applies the ContainsFold predicate on the "user_id" field.
func UserIDContainsFold(v string) predicate.Console {
	return predicate.Console(sql.FieldContainsFold(FieldUserID, v))
}

// UserTypeEQ applies the EQ predicate on the "user_type" field.
func UserTypeEQ(v adapter.UserType) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldUserType, v))
}

// UserTypeNEQ applies the NEQ predicate on the "user_type" field.
func UserTypeNEQ(v adapter.UserType) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldUserType, v))
}

// UserTypeIn applies the In predicate on the "user_type" field.
func UserTypeIn(vs ...adapter.UserType) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldUserType, vs...))
}

// UserTypeNotIn applies the NotIn predicate on the "user_type" field.
func UserTypeNotIn(vs ...adapter.UserType) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldUserType, vs...))
}

// UserTypeGT applies the GT predicate on the "user_type" field.
func UserTypeGT(v adapter.UserType) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldUserType, v))
}

// UserTypeGTE applies the GTE predicate on the "user_type" field.
func UserTypeGTE(v adapter.UserType) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldUserType, v))
}

// UserTypeLT applies the LT predicate on the "user_type" field.
func UserTypeLT(v adapter.UserType) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldUserType, v))
}

// UserTypeLTE applies the LTE predicate on the "user_type" field.
func UserTypeLTE(v adapter.UserType) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldUserType, v))
}

// StepEQ applies the EQ predicate on the "step" field.
func StepEQ(v int) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldStep, v))
}

// StepNEQ applies the NEQ predicate on the "step" field.
func StepNEQ(v int) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldStep, v))
}

// StepIn applies the In predicate on the "step" field.
func StepIn(vs ...int) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldStep, vs...))
}

// StepNotIn applies the NotIn predicate on the "step" field.
func StepNotIn(vs ...int) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldStep, vs...))
}

// StepGT applies the GT predicate on the "step" field.
func StepGT(v int) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldStep, v))
}

// StepGTE applies the GTE predicate on the "step" field.
func StepGTE(v int) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldStep, v))
}

// StepLT applies the LT predicate on the "step" field.
func StepLT(v int) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldStep, v))
}

// StepLTE applies the LTE predicate on the "step" field.
func StepLTE(v int) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldStep, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldStatus, vs...))
}

// BeforeBinIsNil applies the IsNil predicate on the "before_bin" field.
func BeforeBinIsNil() predicate.Console {
	return predicate.Console(sql.FieldIsNull(FieldBeforeBin))
}

// BeforeBinNotNil applies the NotNil predicate on the "before_bin" field.
func BeforeBinNotNil() predicate.Console {
	return predicate.Console(sql.FieldNotNull(FieldBeforeBin))
}

// AfterBinIsNil applies the IsNil predicate on the "after_bin" field.
func AfterBinIsNil() predicate.Console {
	return predicate.Console(sql.FieldIsNull(FieldAfterBin))
}

// AfterBinNotNil applies the NotNil predicate on the "after_bin" field.
func AfterBinNotNil() predicate.Console {
	return predicate.Console(sql.FieldNotNull(FieldAfterBin))
}

// MessageEQ applies the EQ predicate on the "message" field.
func MessageEQ(v string) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldMessage, v))
}

// MessageNEQ applies the NEQ predicate on the "message" field.
func MessageNEQ(v string) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldMessage, v))
}

// MessageIn applies the In predicate on the "message" field.
func MessageIn(vs ...string) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldMessage, vs...))
}

// MessageNotIn applies the NotIn predicate on the "message" field.
func MessageNotIn(vs ...string) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldMessage, vs...))
}

// MessageGT applies the GT predicate on the "message" field.
func MessageGT(v string) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldMessage, v))
}

// MessageGTE applies the GTE predicate on the "message" field.
func MessageGTE(v string) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldMessage, v))
}

// MessageLT applies the LT predicate on the "message" field.
func MessageLT(v string) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldMessage, v))
}

// MessageLTE applies the LTE predicate on the "message" field.
func MessageLTE(v string) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldMessage, v))
}

// MessageContains applies the Contains predicate on the "message" field.
func MessageContains(v string) predicate.Console {
	return predicate.Console(sql.FieldContains(FieldMessage, v))
}

// MessageHasPrefix applies the HasPrefix predicate on the "message" field.
func MessageHasPrefix(v string) predicate.Console {
	return predicate.Console(sql.FieldHasPrefix(FieldMessage, v))
}

// MessageHasSuffix applies the HasSuffix predicate on the "message" field.
func MessageHasSuffix(v string) predicate.Console {
	return predicate.Console(sql.FieldHasSuffix(FieldMessage, v))
}

// MessageIsNil applies the IsNil predicate on the "message" field.
func MessageIsNil() predicate.Console {
	return predicate.Console(sql.FieldIsNull(FieldMessage))
}

// MessageNotNil applies the NotNil predicate on the "message" field.
func MessageNotNil() predicate.Console {
	return predicate.Console(sql.FieldNotNull(FieldMessage))
}

// MessageEqualFold applies the EqualFold predicate on the "message" field.
func MessageEqualFold(v string) predicate.Console {
	return predicate.Console(sql.FieldEqualFold(FieldMessage, v))
}

// MessageContainsFold applies the ContainsFold predicate on the "message" field.
func MessageContainsFold(v string) predicate.Console {
	return predicate.Console(sql.FieldContainsFold(FieldMessage, v))
}

// StartAtEQ applies the EQ predicate on the "startAt" field.
func StartAtEQ(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldStartAt, v))
}

// StartAtNEQ applies the NEQ predicate on the "startAt" field.
func StartAtNEQ(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldStartAt, v))
}

// StartAtIn applies the In predicate on the "startAt" field.
func StartAtIn(vs ...time.Time) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldStartAt, vs...))
}

// StartAtNotIn applies the NotIn predicate on the "startAt" field.
func StartAtNotIn(vs ...time.Time) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldStartAt, vs...))
}

// StartAtGT applies the GT predicate on the "startAt" field.
func StartAtGT(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldStartAt, v))
}

// StartAtGTE applies the GTE predicate on the "startAt" field.
func StartAtGTE(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldStartAt, v))
}

// StartAtLT applies the LT predicate on the "startAt" field.
func StartAtLT(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldStartAt, v))
}

// StartAtLTE applies the LTE predicate on the "startAt" field.
func StartAtLTE(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldStartAt, v))
}

// StartAtIsNil applies the IsNil predicate on the "startAt" field.
func StartAtIsNil() predicate.Console {
	return predicate.Console(sql.FieldIsNull(FieldStartAt))
}

// StartAtNotNil applies the NotNil predicate on the "startAt" field.
func StartAtNotNil() predicate.Console {
	return predicate.Console(sql.FieldNotNull(FieldStartAt))
}

// StopAtEQ applies the EQ predicate on the "stopAt" field.
func StopAtEQ(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldStopAt, v))
}

// StopAtNEQ applies the NEQ predicate on the "stopAt" field.
func StopAtNEQ(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldStopAt, v))
}

// StopAtIn applies the In predicate on the "stopAt" field.
func StopAtIn(vs ...time.Time) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldStopAt, vs...))
}

// StopAtNotIn applies the NotIn predicate on the "stopAt" field.
func StopAtNotIn(vs ...time.Time) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldStopAt, vs...))
}

// StopAtGT applies the GT predicate on the "stopAt" field.
func StopAtGT(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldStopAt, v))
}

// StopAtGTE applies the GTE predicate on the "stopAt" field.
func StopAtGTE(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldStopAt, v))
}

// StopAtLT applies the LT predicate on the "stopAt" field.
func StopAtLT(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldStopAt, v))
}

// StopAtLTE applies the LTE predicate on the "stopAt" field.
func StopAtLTE(v time.Time) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldStopAt, v))
}

// StopAtIsNil applies the IsNil predicate on the "stopAt" field.
func StopAtIsNil() predicate.Console {
	return predicate.Console(sql.FieldIsNull(FieldStopAt))
}

// StopAtNotNil applies the NotNil predicate on the "stopAt" field.
func StopAtNotNil() predicate.Console {
	return predicate.Console(sql.FieldNotNull(FieldStopAt))
}

// DurationEQ applies the EQ predicate on the "duration" field.
func DurationEQ(v float64) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldDuration, v))
}

// DurationNEQ applies the NEQ predicate on the "duration" field.
func DurationNEQ(v float64) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldDuration, v))
}

// DurationIn applies the In predicate on the "duration" field.
func DurationIn(vs ...float64) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldDuration, vs...))
}

// DurationNotIn applies the NotIn predicate on the "duration" field.
func DurationNotIn(vs ...float64) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldDuration, vs...))
}

// DurationGT applies the GT predicate on the "duration" field.
func DurationGT(v float64) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldDuration, v))
}

// DurationGTE applies the GTE predicate on the "duration" field.
func DurationGTE(v float64) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldDuration, v))
}

// DurationLT applies the LT predicate on the "duration" field.
func DurationLT(v float64) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldDuration, v))
}

// DurationLTE applies the LTE predicate on the "duration" field.
func DurationLTE(v float64) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldDuration, v))
}

// DurationIsNil applies the IsNil predicate on the "duration" field.
func DurationIsNil() predicate.Console {
	return predicate.Console(sql.FieldIsNull(FieldDuration))
}

// DurationNotNil applies the NotNil predicate on the "duration" field.
func DurationNotNil() predicate.Console {
	return predicate.Console(sql.FieldNotNull(FieldDuration))
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Console {
	return predicate.Console(sql.FieldEQ(FieldRemark, v))
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Console {
	return predicate.Console(sql.FieldNEQ(FieldRemark, v))
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Console {
	return predicate.Console(sql.FieldIn(FieldRemark, vs...))
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Console {
	return predicate.Console(sql.FieldNotIn(FieldRemark, vs...))
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Console {
	return predicate.Console(sql.FieldGT(FieldRemark, v))
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Console {
	return predicate.Console(sql.FieldGTE(FieldRemark, v))
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Console {
	return predicate.Console(sql.FieldLT(FieldRemark, v))
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Console {
	return predicate.Console(sql.FieldLTE(FieldRemark, v))
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Console {
	return predicate.Console(sql.FieldContains(FieldRemark, v))
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Console {
	return predicate.Console(sql.FieldHasPrefix(FieldRemark, v))
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Console {
	return predicate.Console(sql.FieldHasSuffix(FieldRemark, v))
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Console {
	return predicate.Console(sql.FieldIsNull(FieldRemark))
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Console {
	return predicate.Console(sql.FieldNotNull(FieldRemark))
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Console {
	return predicate.Console(sql.FieldEqualFold(FieldRemark, v))
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Console {
	return predicate.Console(sql.FieldContainsFold(FieldRemark, v))
}

// HasCabinet applies the HasEdge predicate on the "cabinet" edge.
func HasCabinet() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCabinetWith applies the HasEdge predicate on the "cabinet" edge with a given conditions (other predicates).
func HasCabinetWith(preds ...predicate.Cabinet) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CabinetInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, CabinetTable, CabinetColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBin applies the HasEdge predicate on the "bin" edge.
func HasBin() predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BinTable, BinColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBinWith applies the HasEdge predicate on the "bin" edge with a given conditions (other predicates).
func HasBinWith(preds ...predicate.Bin) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(BinInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, BinTable, BinColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Console) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Console) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Console) predicate.Console {
	return predicate.Console(func(s *sql.Selector) {
		p(s.Not())
	})
}
