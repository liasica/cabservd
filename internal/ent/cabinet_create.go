// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/cabservd/internal/ent/bin"
	"github.com/auroraride/cabservd/internal/ent/cabinet"
)

// CabinetCreate is the builder for creating a Cabinet entity.
type CabinetCreate struct {
	config
	mutation *CabinetMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (cc *CabinetCreate) SetCreatedAt(t time.Time) *CabinetCreate {
	cc.mutation.SetCreatedAt(t)
	return cc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableCreatedAt(t *time.Time) *CabinetCreate {
	if t != nil {
		cc.SetCreatedAt(*t)
	}
	return cc
}

// SetUpdatedAt sets the "updated_at" field.
func (cc *CabinetCreate) SetUpdatedAt(t time.Time) *CabinetCreate {
	cc.mutation.SetUpdatedAt(t)
	return cc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableUpdatedAt(t *time.Time) *CabinetCreate {
	if t != nil {
		cc.SetUpdatedAt(*t)
	}
	return cc
}

// SetOnline sets the "online" field.
func (cc *CabinetCreate) SetOnline(b bool) *CabinetCreate {
	cc.mutation.SetOnline(b)
	return cc
}

// SetNillableOnline sets the "online" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableOnline(b *bool) *CabinetCreate {
	if b != nil {
		cc.SetOnline(*b)
	}
	return cc
}

// SetPower sets the "power" field.
func (cc *CabinetCreate) SetPower(b bool) *CabinetCreate {
	cc.mutation.SetPower(b)
	return cc
}

// SetNillablePower sets the "power" field if the given value is not nil.
func (cc *CabinetCreate) SetNillablePower(b *bool) *CabinetCreate {
	if b != nil {
		cc.SetPower(*b)
	}
	return cc
}

// SetSerial sets the "serial" field.
func (cc *CabinetCreate) SetSerial(s string) *CabinetCreate {
	cc.mutation.SetSerial(s)
	return cc
}

// SetStatus sets the "status" field.
func (cc *CabinetCreate) SetStatus(c cabinet.Status) *CabinetCreate {
	cc.mutation.SetStatus(c)
	return cc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableStatus(c *cabinet.Status) *CabinetCreate {
	if c != nil {
		cc.SetStatus(*c)
	}
	return cc
}

// SetEnable sets the "enable" field.
func (cc *CabinetCreate) SetEnable(b bool) *CabinetCreate {
	cc.mutation.SetEnable(b)
	return cc
}

// SetNillableEnable sets the "enable" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableEnable(b *bool) *CabinetCreate {
	if b != nil {
		cc.SetEnable(*b)
	}
	return cc
}

// SetLng sets the "lng" field.
func (cc *CabinetCreate) SetLng(f float64) *CabinetCreate {
	cc.mutation.SetLng(f)
	return cc
}

// SetNillableLng sets the "lng" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableLng(f *float64) *CabinetCreate {
	if f != nil {
		cc.SetLng(*f)
	}
	return cc
}

// SetLat sets the "lat" field.
func (cc *CabinetCreate) SetLat(f float64) *CabinetCreate {
	cc.mutation.SetLat(f)
	return cc
}

// SetNillableLat sets the "lat" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableLat(f *float64) *CabinetCreate {
	if f != nil {
		cc.SetLat(*f)
	}
	return cc
}

// SetGsm sets the "gsm" field.
func (cc *CabinetCreate) SetGsm(f float64) *CabinetCreate {
	cc.mutation.SetGsm(f)
	return cc
}

// SetNillableGsm sets the "gsm" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableGsm(f *float64) *CabinetCreate {
	if f != nil {
		cc.SetGsm(*f)
	}
	return cc
}

// SetVoltage sets the "voltage" field.
func (cc *CabinetCreate) SetVoltage(f float64) *CabinetCreate {
	cc.mutation.SetVoltage(f)
	return cc
}

// SetNillableVoltage sets the "voltage" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableVoltage(f *float64) *CabinetCreate {
	if f != nil {
		cc.SetVoltage(*f)
	}
	return cc
}

// SetCurrent sets the "current" field.
func (cc *CabinetCreate) SetCurrent(f float64) *CabinetCreate {
	cc.mutation.SetCurrent(f)
	return cc
}

// SetNillableCurrent sets the "current" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableCurrent(f *float64) *CabinetCreate {
	if f != nil {
		cc.SetCurrent(*f)
	}
	return cc
}

// SetTemperature sets the "temperature" field.
func (cc *CabinetCreate) SetTemperature(f float64) *CabinetCreate {
	cc.mutation.SetTemperature(f)
	return cc
}

// SetNillableTemperature sets the "temperature" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableTemperature(f *float64) *CabinetCreate {
	if f != nil {
		cc.SetTemperature(*f)
	}
	return cc
}

// SetElectricity sets the "electricity" field.
func (cc *CabinetCreate) SetElectricity(f float64) *CabinetCreate {
	cc.mutation.SetElectricity(f)
	return cc
}

// SetNillableElectricity sets the "electricity" field if the given value is not nil.
func (cc *CabinetCreate) SetNillableElectricity(f *float64) *CabinetCreate {
	if f != nil {
		cc.SetElectricity(*f)
	}
	return cc
}

// AddBinIDs adds the "bins" edge to the Bin entity by IDs.
func (cc *CabinetCreate) AddBinIDs(ids ...uint64) *CabinetCreate {
	cc.mutation.AddBinIDs(ids...)
	return cc
}

// AddBins adds the "bins" edges to the Bin entity.
func (cc *CabinetCreate) AddBins(b ...*Bin) *CabinetCreate {
	ids := make([]uint64, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return cc.AddBinIDs(ids...)
}

// Mutation returns the CabinetMutation object of the builder.
func (cc *CabinetCreate) Mutation() *CabinetMutation {
	return cc.mutation
}

// Save creates the Cabinet in the database.
func (cc *CabinetCreate) Save(ctx context.Context) (*Cabinet, error) {
	cc.defaults()
	return withHooks[*Cabinet, CabinetMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CabinetCreate) SaveX(ctx context.Context) *Cabinet {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CabinetCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CabinetCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CabinetCreate) defaults() {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		v := cabinet.DefaultCreatedAt()
		cc.mutation.SetCreatedAt(v)
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		v := cabinet.DefaultUpdatedAt()
		cc.mutation.SetUpdatedAt(v)
	}
	if _, ok := cc.mutation.Online(); !ok {
		v := cabinet.DefaultOnline
		cc.mutation.SetOnline(v)
	}
	if _, ok := cc.mutation.Power(); !ok {
		v := cabinet.DefaultPower
		cc.mutation.SetPower(v)
	}
	if _, ok := cc.mutation.Status(); !ok {
		v := cabinet.DefaultStatus
		cc.mutation.SetStatus(v)
	}
	if _, ok := cc.mutation.Enable(); !ok {
		v := cabinet.DefaultEnable
		cc.mutation.SetEnable(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CabinetCreate) check() error {
	if _, ok := cc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Cabinet.created_at"`)}
	}
	if _, ok := cc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Cabinet.updated_at"`)}
	}
	if _, ok := cc.mutation.Online(); !ok {
		return &ValidationError{Name: "online", err: errors.New(`ent: missing required field "Cabinet.online"`)}
	}
	if _, ok := cc.mutation.Power(); !ok {
		return &ValidationError{Name: "power", err: errors.New(`ent: missing required field "Cabinet.power"`)}
	}
	if _, ok := cc.mutation.Serial(); !ok {
		return &ValidationError{Name: "serial", err: errors.New(`ent: missing required field "Cabinet.serial"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Cabinet.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := cabinet.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Cabinet.status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.Enable(); !ok {
		return &ValidationError{Name: "enable", err: errors.New(`ent: missing required field "Cabinet.enable"`)}
	}
	return nil
}

func (cc *CabinetCreate) sqlSave(ctx context.Context) (*Cabinet, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CabinetCreate) createSpec() (*Cabinet, *sqlgraph.CreateSpec) {
	var (
		_node = &Cabinet{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: cabinet.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: cabinet.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.CreatedAt(); ok {
		_spec.SetField(cabinet.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := cc.mutation.UpdatedAt(); ok {
		_spec.SetField(cabinet.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := cc.mutation.Online(); ok {
		_spec.SetField(cabinet.FieldOnline, field.TypeBool, value)
		_node.Online = value
	}
	if value, ok := cc.mutation.Power(); ok {
		_spec.SetField(cabinet.FieldPower, field.TypeBool, value)
		_node.Power = value
	}
	if value, ok := cc.mutation.Serial(); ok {
		_spec.SetField(cabinet.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(cabinet.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.Enable(); ok {
		_spec.SetField(cabinet.FieldEnable, field.TypeBool, value)
		_node.Enable = value
	}
	if value, ok := cc.mutation.Lng(); ok {
		_spec.SetField(cabinet.FieldLng, field.TypeFloat64, value)
		_node.Lng = &value
	}
	if value, ok := cc.mutation.Lat(); ok {
		_spec.SetField(cabinet.FieldLat, field.TypeFloat64, value)
		_node.Lat = &value
	}
	if value, ok := cc.mutation.Gsm(); ok {
		_spec.SetField(cabinet.FieldGsm, field.TypeFloat64, value)
		_node.Gsm = &value
	}
	if value, ok := cc.mutation.Voltage(); ok {
		_spec.SetField(cabinet.FieldVoltage, field.TypeFloat64, value)
		_node.Voltage = &value
	}
	if value, ok := cc.mutation.Current(); ok {
		_spec.SetField(cabinet.FieldCurrent, field.TypeFloat64, value)
		_node.Current = &value
	}
	if value, ok := cc.mutation.Temperature(); ok {
		_spec.SetField(cabinet.FieldTemperature, field.TypeFloat64, value)
		_node.Temperature = &value
	}
	if value, ok := cc.mutation.Electricity(); ok {
		_spec.SetField(cabinet.FieldElectricity, field.TypeFloat64, value)
		_node.Electricity = &value
	}
	if nodes := cc.mutation.BinsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cabinet.BinsTable,
			Columns: []string{cabinet.BinsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cabinet.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (cc *CabinetCreate) OnConflict(opts ...sql.ConflictOption) *CabinetUpsertOne {
	cc.conflict = opts
	return &CabinetUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *CabinetCreate) OnConflictColumns(columns ...string) *CabinetUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &CabinetUpsertOne{
		create: cc,
	}
}

type (
	// CabinetUpsertOne is the builder for "upsert"-ing
	//  one Cabinet node.
	CabinetUpsertOne struct {
		create *CabinetCreate
	}

	// CabinetUpsert is the "OnConflict" setter.
	CabinetUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetUpsert) SetUpdatedAt(v time.Time) *CabinetUpsert {
	u.Set(cabinet.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateUpdatedAt() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldUpdatedAt)
	return u
}

// SetOnline sets the "online" field.
func (u *CabinetUpsert) SetOnline(v bool) *CabinetUpsert {
	u.Set(cabinet.FieldOnline, v)
	return u
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateOnline() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldOnline)
	return u
}

// SetPower sets the "power" field.
func (u *CabinetUpsert) SetPower(v bool) *CabinetUpsert {
	u.Set(cabinet.FieldPower, v)
	return u
}

// UpdatePower sets the "power" field to the value that was provided on create.
func (u *CabinetUpsert) UpdatePower() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldPower)
	return u
}

// SetSerial sets the "serial" field.
func (u *CabinetUpsert) SetSerial(v string) *CabinetUpsert {
	u.Set(cabinet.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateSerial() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldSerial)
	return u
}

// SetStatus sets the "status" field.
func (u *CabinetUpsert) SetStatus(v cabinet.Status) *CabinetUpsert {
	u.Set(cabinet.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateStatus() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldStatus)
	return u
}

// SetEnable sets the "enable" field.
func (u *CabinetUpsert) SetEnable(v bool) *CabinetUpsert {
	u.Set(cabinet.FieldEnable, v)
	return u
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateEnable() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldEnable)
	return u
}

// SetLng sets the "lng" field.
func (u *CabinetUpsert) SetLng(v float64) *CabinetUpsert {
	u.Set(cabinet.FieldLng, v)
	return u
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateLng() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldLng)
	return u
}

// AddLng adds v to the "lng" field.
func (u *CabinetUpsert) AddLng(v float64) *CabinetUpsert {
	u.Add(cabinet.FieldLng, v)
	return u
}

// ClearLng clears the value of the "lng" field.
func (u *CabinetUpsert) ClearLng() *CabinetUpsert {
	u.SetNull(cabinet.FieldLng)
	return u
}

// SetLat sets the "lat" field.
func (u *CabinetUpsert) SetLat(v float64) *CabinetUpsert {
	u.Set(cabinet.FieldLat, v)
	return u
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateLat() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldLat)
	return u
}

// AddLat adds v to the "lat" field.
func (u *CabinetUpsert) AddLat(v float64) *CabinetUpsert {
	u.Add(cabinet.FieldLat, v)
	return u
}

// ClearLat clears the value of the "lat" field.
func (u *CabinetUpsert) ClearLat() *CabinetUpsert {
	u.SetNull(cabinet.FieldLat)
	return u
}

// SetGsm sets the "gsm" field.
func (u *CabinetUpsert) SetGsm(v float64) *CabinetUpsert {
	u.Set(cabinet.FieldGsm, v)
	return u
}

// UpdateGsm sets the "gsm" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateGsm() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldGsm)
	return u
}

// AddGsm adds v to the "gsm" field.
func (u *CabinetUpsert) AddGsm(v float64) *CabinetUpsert {
	u.Add(cabinet.FieldGsm, v)
	return u
}

// ClearGsm clears the value of the "gsm" field.
func (u *CabinetUpsert) ClearGsm() *CabinetUpsert {
	u.SetNull(cabinet.FieldGsm)
	return u
}

// SetVoltage sets the "voltage" field.
func (u *CabinetUpsert) SetVoltage(v float64) *CabinetUpsert {
	u.Set(cabinet.FieldVoltage, v)
	return u
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateVoltage() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldVoltage)
	return u
}

// AddVoltage adds v to the "voltage" field.
func (u *CabinetUpsert) AddVoltage(v float64) *CabinetUpsert {
	u.Add(cabinet.FieldVoltage, v)
	return u
}

// ClearVoltage clears the value of the "voltage" field.
func (u *CabinetUpsert) ClearVoltage() *CabinetUpsert {
	u.SetNull(cabinet.FieldVoltage)
	return u
}

// SetCurrent sets the "current" field.
func (u *CabinetUpsert) SetCurrent(v float64) *CabinetUpsert {
	u.Set(cabinet.FieldCurrent, v)
	return u
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateCurrent() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldCurrent)
	return u
}

// AddCurrent adds v to the "current" field.
func (u *CabinetUpsert) AddCurrent(v float64) *CabinetUpsert {
	u.Add(cabinet.FieldCurrent, v)
	return u
}

// ClearCurrent clears the value of the "current" field.
func (u *CabinetUpsert) ClearCurrent() *CabinetUpsert {
	u.SetNull(cabinet.FieldCurrent)
	return u
}

// SetTemperature sets the "temperature" field.
func (u *CabinetUpsert) SetTemperature(v float64) *CabinetUpsert {
	u.Set(cabinet.FieldTemperature, v)
	return u
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateTemperature() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldTemperature)
	return u
}

// AddTemperature adds v to the "temperature" field.
func (u *CabinetUpsert) AddTemperature(v float64) *CabinetUpsert {
	u.Add(cabinet.FieldTemperature, v)
	return u
}

// ClearTemperature clears the value of the "temperature" field.
func (u *CabinetUpsert) ClearTemperature() *CabinetUpsert {
	u.SetNull(cabinet.FieldTemperature)
	return u
}

// SetElectricity sets the "electricity" field.
func (u *CabinetUpsert) SetElectricity(v float64) *CabinetUpsert {
	u.Set(cabinet.FieldElectricity, v)
	return u
}

// UpdateElectricity sets the "electricity" field to the value that was provided on create.
func (u *CabinetUpsert) UpdateElectricity() *CabinetUpsert {
	u.SetExcluded(cabinet.FieldElectricity)
	return u
}

// AddElectricity adds v to the "electricity" field.
func (u *CabinetUpsert) AddElectricity(v float64) *CabinetUpsert {
	u.Add(cabinet.FieldElectricity, v)
	return u
}

// ClearElectricity clears the value of the "electricity" field.
func (u *CabinetUpsert) ClearElectricity() *CabinetUpsert {
	u.SetNull(cabinet.FieldElectricity)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CabinetUpsertOne) UpdateNewValues() *CabinetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(cabinet.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *CabinetUpsertOne) Ignore() *CabinetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetUpsertOne) DoNothing() *CabinetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetCreate.OnConflict
// documentation for more info.
func (u *CabinetUpsertOne) Update(set func(*CabinetUpsert)) *CabinetUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetUpsertOne) SetUpdatedAt(v time.Time) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateUpdatedAt() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetOnline sets the "online" field.
func (u *CabinetUpsertOne) SetOnline(v bool) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetOnline(v)
	})
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateOnline() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateOnline()
	})
}

// SetPower sets the "power" field.
func (u *CabinetUpsertOne) SetPower(v bool) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetPower(v)
	})
}

// UpdatePower sets the "power" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdatePower() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdatePower()
	})
}

// SetSerial sets the "serial" field.
func (u *CabinetUpsertOne) SetSerial(v string) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateSerial() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateSerial()
	})
}

// SetStatus sets the "status" field.
func (u *CabinetUpsertOne) SetStatus(v cabinet.Status) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateStatus() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateStatus()
	})
}

// SetEnable sets the "enable" field.
func (u *CabinetUpsertOne) SetEnable(v bool) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateEnable() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateEnable()
	})
}

// SetLng sets the "lng" field.
func (u *CabinetUpsertOne) SetLng(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *CabinetUpsertOne) AddLng(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateLng() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateLng()
	})
}

// ClearLng clears the value of the "lng" field.
func (u *CabinetUpsertOne) ClearLng() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearLng()
	})
}

// SetLat sets the "lat" field.
func (u *CabinetUpsertOne) SetLat(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *CabinetUpsertOne) AddLat(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateLat() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "lat" field.
func (u *CabinetUpsertOne) ClearLat() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearLat()
	})
}

// SetGsm sets the "gsm" field.
func (u *CabinetUpsertOne) SetGsm(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetGsm(v)
	})
}

// AddGsm adds v to the "gsm" field.
func (u *CabinetUpsertOne) AddGsm(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.AddGsm(v)
	})
}

// UpdateGsm sets the "gsm" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateGsm() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateGsm()
	})
}

// ClearGsm clears the value of the "gsm" field.
func (u *CabinetUpsertOne) ClearGsm() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearGsm()
	})
}

// SetVoltage sets the "voltage" field.
func (u *CabinetUpsertOne) SetVoltage(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *CabinetUpsertOne) AddVoltage(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateVoltage() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateVoltage()
	})
}

// ClearVoltage clears the value of the "voltage" field.
func (u *CabinetUpsertOne) ClearVoltage() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearVoltage()
	})
}

// SetCurrent sets the "current" field.
func (u *CabinetUpsertOne) SetCurrent(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetCurrent(v)
	})
}

// AddCurrent adds v to the "current" field.
func (u *CabinetUpsertOne) AddCurrent(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.AddCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateCurrent() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateCurrent()
	})
}

// ClearCurrent clears the value of the "current" field.
func (u *CabinetUpsertOne) ClearCurrent() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearCurrent()
	})
}

// SetTemperature sets the "temperature" field.
func (u *CabinetUpsertOne) SetTemperature(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetTemperature(v)
	})
}

// AddTemperature adds v to the "temperature" field.
func (u *CabinetUpsertOne) AddTemperature(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.AddTemperature(v)
	})
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateTemperature() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateTemperature()
	})
}

// ClearTemperature clears the value of the "temperature" field.
func (u *CabinetUpsertOne) ClearTemperature() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearTemperature()
	})
}

// SetElectricity sets the "electricity" field.
func (u *CabinetUpsertOne) SetElectricity(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.SetElectricity(v)
	})
}

// AddElectricity adds v to the "electricity" field.
func (u *CabinetUpsertOne) AddElectricity(v float64) *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.AddElectricity(v)
	})
}

// UpdateElectricity sets the "electricity" field to the value that was provided on create.
func (u *CabinetUpsertOne) UpdateElectricity() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateElectricity()
	})
}

// ClearElectricity clears the value of the "electricity" field.
func (u *CabinetUpsertOne) ClearElectricity() *CabinetUpsertOne {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearElectricity()
	})
}

// Exec executes the query.
func (u *CabinetUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *CabinetUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *CabinetUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Save creates the Cabinet in the database.
func (u *CabinetUpsertOne) Save(ctx context.Context) (*Cabinet, error) {
	if len(u.create.conflict) == 0 {
		return nil, errors.New("ent: missing options for CabinetCreate.OnConflict")
	}
	return u.create.Save(ctx)
}

// CabinetCreateBulk is the builder for creating many Cabinet entities in bulk.
type CabinetCreateBulk struct {
	config
	builders []*CabinetCreate
	conflict []sql.ConflictOption
}

// Save creates the Cabinet entities in the database.
func (ccb *CabinetCreateBulk) Save(ctx context.Context) ([]*Cabinet, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Cabinet, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CabinetMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CabinetCreateBulk) SaveX(ctx context.Context) []*Cabinet {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CabinetCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CabinetCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Cabinet.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.CabinetUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ccb *CabinetCreateBulk) OnConflict(opts ...sql.ConflictOption) *CabinetUpsertBulk {
	ccb.conflict = opts
	return &CabinetUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *CabinetCreateBulk) OnConflictColumns(columns ...string) *CabinetUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &CabinetUpsertBulk{
		create: ccb,
	}
}

// CabinetUpsertBulk is the builder for "upsert"-ing
// a bulk of Cabinet nodes.
type CabinetUpsertBulk struct {
	create *CabinetCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *CabinetUpsertBulk) UpdateNewValues() *CabinetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(cabinet.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Cabinet.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *CabinetUpsertBulk) Ignore() *CabinetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *CabinetUpsertBulk) DoNothing() *CabinetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the CabinetCreateBulk.OnConflict
// documentation for more info.
func (u *CabinetUpsertBulk) Update(set func(*CabinetUpsert)) *CabinetUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&CabinetUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *CabinetUpsertBulk) SetUpdatedAt(v time.Time) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateUpdatedAt() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetOnline sets the "online" field.
func (u *CabinetUpsertBulk) SetOnline(v bool) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetOnline(v)
	})
}

// UpdateOnline sets the "online" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateOnline() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateOnline()
	})
}

// SetPower sets the "power" field.
func (u *CabinetUpsertBulk) SetPower(v bool) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetPower(v)
	})
}

// UpdatePower sets the "power" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdatePower() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdatePower()
	})
}

// SetSerial sets the "serial" field.
func (u *CabinetUpsertBulk) SetSerial(v string) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateSerial() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateSerial()
	})
}

// SetStatus sets the "status" field.
func (u *CabinetUpsertBulk) SetStatus(v cabinet.Status) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateStatus() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateStatus()
	})
}

// SetEnable sets the "enable" field.
func (u *CabinetUpsertBulk) SetEnable(v bool) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetEnable(v)
	})
}

// UpdateEnable sets the "enable" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateEnable() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateEnable()
	})
}

// SetLng sets the "lng" field.
func (u *CabinetUpsertBulk) SetLng(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetLng(v)
	})
}

// AddLng adds v to the "lng" field.
func (u *CabinetUpsertBulk) AddLng(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.AddLng(v)
	})
}

// UpdateLng sets the "lng" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateLng() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateLng()
	})
}

// ClearLng clears the value of the "lng" field.
func (u *CabinetUpsertBulk) ClearLng() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearLng()
	})
}

// SetLat sets the "lat" field.
func (u *CabinetUpsertBulk) SetLat(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetLat(v)
	})
}

// AddLat adds v to the "lat" field.
func (u *CabinetUpsertBulk) AddLat(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.AddLat(v)
	})
}

// UpdateLat sets the "lat" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateLat() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateLat()
	})
}

// ClearLat clears the value of the "lat" field.
func (u *CabinetUpsertBulk) ClearLat() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearLat()
	})
}

// SetGsm sets the "gsm" field.
func (u *CabinetUpsertBulk) SetGsm(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetGsm(v)
	})
}

// AddGsm adds v to the "gsm" field.
func (u *CabinetUpsertBulk) AddGsm(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.AddGsm(v)
	})
}

// UpdateGsm sets the "gsm" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateGsm() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateGsm()
	})
}

// ClearGsm clears the value of the "gsm" field.
func (u *CabinetUpsertBulk) ClearGsm() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearGsm()
	})
}

// SetVoltage sets the "voltage" field.
func (u *CabinetUpsertBulk) SetVoltage(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetVoltage(v)
	})
}

// AddVoltage adds v to the "voltage" field.
func (u *CabinetUpsertBulk) AddVoltage(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.AddVoltage(v)
	})
}

// UpdateVoltage sets the "voltage" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateVoltage() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateVoltage()
	})
}

// ClearVoltage clears the value of the "voltage" field.
func (u *CabinetUpsertBulk) ClearVoltage() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearVoltage()
	})
}

// SetCurrent sets the "current" field.
func (u *CabinetUpsertBulk) SetCurrent(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetCurrent(v)
	})
}

// AddCurrent adds v to the "current" field.
func (u *CabinetUpsertBulk) AddCurrent(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.AddCurrent(v)
	})
}

// UpdateCurrent sets the "current" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateCurrent() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateCurrent()
	})
}

// ClearCurrent clears the value of the "current" field.
func (u *CabinetUpsertBulk) ClearCurrent() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearCurrent()
	})
}

// SetTemperature sets the "temperature" field.
func (u *CabinetUpsertBulk) SetTemperature(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetTemperature(v)
	})
}

// AddTemperature adds v to the "temperature" field.
func (u *CabinetUpsertBulk) AddTemperature(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.AddTemperature(v)
	})
}

// UpdateTemperature sets the "temperature" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateTemperature() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateTemperature()
	})
}

// ClearTemperature clears the value of the "temperature" field.
func (u *CabinetUpsertBulk) ClearTemperature() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearTemperature()
	})
}

// SetElectricity sets the "electricity" field.
func (u *CabinetUpsertBulk) SetElectricity(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.SetElectricity(v)
	})
}

// AddElectricity adds v to the "electricity" field.
func (u *CabinetUpsertBulk) AddElectricity(v float64) *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.AddElectricity(v)
	})
}

// UpdateElectricity sets the "electricity" field to the value that was provided on create.
func (u *CabinetUpsertBulk) UpdateElectricity() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.UpdateElectricity()
	})
}

// ClearElectricity clears the value of the "electricity" field.
func (u *CabinetUpsertBulk) ClearElectricity() *CabinetUpsertBulk {
	return u.Update(func(s *CabinetUpsert) {
		s.ClearElectricity()
	})
}

// Exec executes the query.
func (u *CabinetUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the CabinetCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for CabinetCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *CabinetUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
