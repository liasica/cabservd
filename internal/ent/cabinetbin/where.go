// Code generated by ent, DO NOT EDIT.

package cabinetbin

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/cabservd/internal/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Brand applies equality check predicate on the "brand" field. It's identical to BrandEQ.
func Brand(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrand), v))
	})
}

// Sn applies equality check predicate on the "sn" field. It's identical to SnEQ.
func Sn(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Index applies equality check predicate on the "index" field. It's identical to IndexEQ.
func Index(v int) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// Open applies equality check predicate on the "open" field. It's identical to OpenEQ.
func Open(v bool) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpen), v))
	})
}

// BatterySn applies equality check predicate on the "battery_sn" field. It's identical to BatterySnEQ.
func BatterySn(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBatterySn), v))
	})
}

// Voltage applies equality check predicate on the "voltage" field. It's identical to VoltageEQ.
func Voltage(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVoltage), v))
	})
}

// Current applies equality check predicate on the "current" field. It's identical to CurrentEQ.
func Current(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrent), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// BrandEQ applies the EQ predicate on the "brand" field.
func BrandEQ(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBrand), v))
	})
}

// BrandNEQ applies the NEQ predicate on the "brand" field.
func BrandNEQ(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBrand), v))
	})
}

// BrandIn applies the In predicate on the "brand" field.
func BrandIn(vs ...string) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBrand), v...))
	})
}

// BrandNotIn applies the NotIn predicate on the "brand" field.
func BrandNotIn(vs ...string) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBrand), v...))
	})
}

// BrandGT applies the GT predicate on the "brand" field.
func BrandGT(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBrand), v))
	})
}

// BrandGTE applies the GTE predicate on the "brand" field.
func BrandGTE(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBrand), v))
	})
}

// BrandLT applies the LT predicate on the "brand" field.
func BrandLT(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBrand), v))
	})
}

// BrandLTE applies the LTE predicate on the "brand" field.
func BrandLTE(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBrand), v))
	})
}

// BrandContains applies the Contains predicate on the "brand" field.
func BrandContains(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBrand), v))
	})
}

// BrandHasPrefix applies the HasPrefix predicate on the "brand" field.
func BrandHasPrefix(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBrand), v))
	})
}

// BrandHasSuffix applies the HasSuffix predicate on the "brand" field.
func BrandHasSuffix(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBrand), v))
	})
}

// BrandEqualFold applies the EqualFold predicate on the "brand" field.
func BrandEqualFold(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBrand), v))
	})
}

// BrandContainsFold applies the ContainsFold predicate on the "brand" field.
func BrandContainsFold(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBrand), v))
	})
}

// SnEQ applies the EQ predicate on the "sn" field.
func SnEQ(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSn), v))
	})
}

// SnNEQ applies the NEQ predicate on the "sn" field.
func SnNEQ(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSn), v))
	})
}

// SnIn applies the In predicate on the "sn" field.
func SnIn(vs ...string) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSn), v...))
	})
}

// SnNotIn applies the NotIn predicate on the "sn" field.
func SnNotIn(vs ...string) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSn), v...))
	})
}

// SnGT applies the GT predicate on the "sn" field.
func SnGT(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSn), v))
	})
}

// SnGTE applies the GTE predicate on the "sn" field.
func SnGTE(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSn), v))
	})
}

// SnLT applies the LT predicate on the "sn" field.
func SnLT(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSn), v))
	})
}

// SnLTE applies the LTE predicate on the "sn" field.
func SnLTE(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSn), v))
	})
}

// SnContains applies the Contains predicate on the "sn" field.
func SnContains(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSn), v))
	})
}

// SnHasPrefix applies the HasPrefix predicate on the "sn" field.
func SnHasPrefix(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSn), v))
	})
}

// SnHasSuffix applies the HasSuffix predicate on the "sn" field.
func SnHasSuffix(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSn), v))
	})
}

// SnEqualFold applies the EqualFold predicate on the "sn" field.
func SnEqualFold(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSn), v))
	})
}

// SnContainsFold applies the ContainsFold predicate on the "sn" field.
func SnContainsFold(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSn), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// IndexEQ applies the EQ predicate on the "index" field.
func IndexEQ(v int) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIndex), v))
	})
}

// IndexNEQ applies the NEQ predicate on the "index" field.
func IndexNEQ(v int) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIndex), v))
	})
}

// IndexIn applies the In predicate on the "index" field.
func IndexIn(vs ...int) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIndex), v...))
	})
}

// IndexNotIn applies the NotIn predicate on the "index" field.
func IndexNotIn(vs ...int) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIndex), v...))
	})
}

// IndexGT applies the GT predicate on the "index" field.
func IndexGT(v int) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIndex), v))
	})
}

// IndexGTE applies the GTE predicate on the "index" field.
func IndexGTE(v int) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIndex), v))
	})
}

// IndexLT applies the LT predicate on the "index" field.
func IndexLT(v int) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIndex), v))
	})
}

// IndexLTE applies the LTE predicate on the "index" field.
func IndexLTE(v int) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIndex), v))
	})
}

// OpenEQ applies the EQ predicate on the "open" field.
func OpenEQ(v bool) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOpen), v))
	})
}

// OpenNEQ applies the NEQ predicate on the "open" field.
func OpenNEQ(v bool) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOpen), v))
	})
}

// BatterySnEQ applies the EQ predicate on the "battery_sn" field.
func BatterySnEQ(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBatterySn), v))
	})
}

// BatterySnNEQ applies the NEQ predicate on the "battery_sn" field.
func BatterySnNEQ(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBatterySn), v))
	})
}

// BatterySnIn applies the In predicate on the "battery_sn" field.
func BatterySnIn(vs ...string) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldBatterySn), v...))
	})
}

// BatterySnNotIn applies the NotIn predicate on the "battery_sn" field.
func BatterySnNotIn(vs ...string) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldBatterySn), v...))
	})
}

// BatterySnGT applies the GT predicate on the "battery_sn" field.
func BatterySnGT(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBatterySn), v))
	})
}

// BatterySnGTE applies the GTE predicate on the "battery_sn" field.
func BatterySnGTE(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBatterySn), v))
	})
}

// BatterySnLT applies the LT predicate on the "battery_sn" field.
func BatterySnLT(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBatterySn), v))
	})
}

// BatterySnLTE applies the LTE predicate on the "battery_sn" field.
func BatterySnLTE(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBatterySn), v))
	})
}

// BatterySnContains applies the Contains predicate on the "battery_sn" field.
func BatterySnContains(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBatterySn), v))
	})
}

// BatterySnHasPrefix applies the HasPrefix predicate on the "battery_sn" field.
func BatterySnHasPrefix(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBatterySn), v))
	})
}

// BatterySnHasSuffix applies the HasSuffix predicate on the "battery_sn" field.
func BatterySnHasSuffix(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBatterySn), v))
	})
}

// BatterySnIsNil applies the IsNil predicate on the "battery_sn" field.
func BatterySnIsNil() predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBatterySn)))
	})
}

// BatterySnNotNil applies the NotNil predicate on the "battery_sn" field.
func BatterySnNotNil() predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBatterySn)))
	})
}

// BatterySnEqualFold applies the EqualFold predicate on the "battery_sn" field.
func BatterySnEqualFold(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBatterySn), v))
	})
}

// BatterySnContainsFold applies the ContainsFold predicate on the "battery_sn" field.
func BatterySnContainsFold(v string) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBatterySn), v))
	})
}

// VoltageEQ applies the EQ predicate on the "voltage" field.
func VoltageEQ(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVoltage), v))
	})
}

// VoltageNEQ applies the NEQ predicate on the "voltage" field.
func VoltageNEQ(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVoltage), v))
	})
}

// VoltageIn applies the In predicate on the "voltage" field.
func VoltageIn(vs ...float64) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVoltage), v...))
	})
}

// VoltageNotIn applies the NotIn predicate on the "voltage" field.
func VoltageNotIn(vs ...float64) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVoltage), v...))
	})
}

// VoltageGT applies the GT predicate on the "voltage" field.
func VoltageGT(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVoltage), v))
	})
}

// VoltageGTE applies the GTE predicate on the "voltage" field.
func VoltageGTE(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVoltage), v))
	})
}

// VoltageLT applies the LT predicate on the "voltage" field.
func VoltageLT(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVoltage), v))
	})
}

// VoltageLTE applies the LTE predicate on the "voltage" field.
func VoltageLTE(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVoltage), v))
	})
}

// VoltageIsNil applies the IsNil predicate on the "voltage" field.
func VoltageIsNil() predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVoltage)))
	})
}

// VoltageNotNil applies the NotNil predicate on the "voltage" field.
func VoltageNotNil() predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVoltage)))
	})
}

// CurrentEQ applies the EQ predicate on the "current" field.
func CurrentEQ(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCurrent), v))
	})
}

// CurrentNEQ applies the NEQ predicate on the "current" field.
func CurrentNEQ(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCurrent), v))
	})
}

// CurrentIn applies the In predicate on the "current" field.
func CurrentIn(vs ...float64) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCurrent), v...))
	})
}

// CurrentNotIn applies the NotIn predicate on the "current" field.
func CurrentNotIn(vs ...float64) predicate.CabinetBin {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCurrent), v...))
	})
}

// CurrentGT applies the GT predicate on the "current" field.
func CurrentGT(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCurrent), v))
	})
}

// CurrentGTE applies the GTE predicate on the "current" field.
func CurrentGTE(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCurrent), v))
	})
}

// CurrentLT applies the LT predicate on the "current" field.
func CurrentLT(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCurrent), v))
	})
}

// CurrentLTE applies the LTE predicate on the "current" field.
func CurrentLTE(v float64) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCurrent), v))
	})
}

// CurrentIsNil applies the IsNil predicate on the "current" field.
func CurrentIsNil() predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCurrent)))
	})
}

// CurrentNotNil applies the NotNil predicate on the "current" field.
func CurrentNotNil() predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCurrent)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CabinetBin) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CabinetBin) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CabinetBin) predicate.CabinetBin {
	return predicate.CabinetBin(func(s *sql.Selector) {
		p(s.Not())
	})
}
