// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/auroraride/cabservd/internal/ent/bin"
	"github.com/auroraride/cabservd/internal/ent/predicate"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeBin = "Bin"
)

// BinMutation represents an operation that mutates the Bin nodes in the graph.
type BinMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	created_at    *time.Time
	updated_at    *time.Time
	uuid          *string
	brand         *string
	sn            *string
	name          *string
	index         *int
	addindex      *int
	open          *bool
	enable        *bool
	battery_sn    *string
	voltage       *float64
	addvoltage    *float64
	current       *float64
	addcurrent    *float64
	soc           *float64
	addsoc        *float64
	soh           *float64
	addsoh        *float64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Bin, error)
	predicates    []predicate.Bin
}

var _ ent.Mutation = (*BinMutation)(nil)

// binOption allows management of the mutation configuration using functional options.
type binOption func(*BinMutation)

// newBinMutation creates new mutation for the Bin entity.
func newBinMutation(c config, op Op, opts ...binOption) *BinMutation {
	m := &BinMutation{
		config:        c,
		op:            op,
		typ:           TypeBin,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withBinID sets the ID field of the mutation.
func withBinID(id uint64) binOption {
	return func(m *BinMutation) {
		var (
			err   error
			once  sync.Once
			value *Bin
		)
		m.oldValue = func(ctx context.Context) (*Bin, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Bin.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withBin sets the old Bin of the mutation.
func withBin(node *Bin) binOption {
	return func(m *BinMutation) {
		m.oldValue = func(context.Context) (*Bin, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m BinMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m BinMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *BinMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *BinMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Bin.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *BinMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *BinMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *BinMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *BinMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *BinMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *BinMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetUUID sets the "uuid" field.
func (m *BinMutation) SetUUID(s string) {
	m.uuid = &s
}

// UUID returns the value of the "uuid" field in the mutation.
func (m *BinMutation) UUID() (r string, exists bool) {
	v := m.uuid
	if v == nil {
		return
	}
	return *v, true
}

// OldUUID returns the old "uuid" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldUUID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUUID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUUID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUUID: %w", err)
	}
	return oldValue.UUID, nil
}

// ResetUUID resets all changes to the "uuid" field.
func (m *BinMutation) ResetUUID() {
	m.uuid = nil
}

// SetBrand sets the "brand" field.
func (m *BinMutation) SetBrand(s string) {
	m.brand = &s
}

// Brand returns the value of the "brand" field in the mutation.
func (m *BinMutation) Brand() (r string, exists bool) {
	v := m.brand
	if v == nil {
		return
	}
	return *v, true
}

// OldBrand returns the old "brand" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldBrand(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBrand is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBrand requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBrand: %w", err)
	}
	return oldValue.Brand, nil
}

// ResetBrand resets all changes to the "brand" field.
func (m *BinMutation) ResetBrand() {
	m.brand = nil
}

// SetSn sets the "sn" field.
func (m *BinMutation) SetSn(s string) {
	m.sn = &s
}

// Sn returns the value of the "sn" field in the mutation.
func (m *BinMutation) Sn() (r string, exists bool) {
	v := m.sn
	if v == nil {
		return
	}
	return *v, true
}

// OldSn returns the old "sn" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldSn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSn: %w", err)
	}
	return oldValue.Sn, nil
}

// ResetSn resets all changes to the "sn" field.
func (m *BinMutation) ResetSn() {
	m.sn = nil
}

// SetName sets the "name" field.
func (m *BinMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *BinMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *BinMutation) ResetName() {
	m.name = nil
}

// SetIndex sets the "index" field.
func (m *BinMutation) SetIndex(i int) {
	m.index = &i
	m.addindex = nil
}

// Index returns the value of the "index" field in the mutation.
func (m *BinMutation) Index() (r int, exists bool) {
	v := m.index
	if v == nil {
		return
	}
	return *v, true
}

// OldIndex returns the old "index" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIndex: %w", err)
	}
	return oldValue.Index, nil
}

// AddIndex adds i to the "index" field.
func (m *BinMutation) AddIndex(i int) {
	if m.addindex != nil {
		*m.addindex += i
	} else {
		m.addindex = &i
	}
}

// AddedIndex returns the value that was added to the "index" field in this mutation.
func (m *BinMutation) AddedIndex() (r int, exists bool) {
	v := m.addindex
	if v == nil {
		return
	}
	return *v, true
}

// ResetIndex resets all changes to the "index" field.
func (m *BinMutation) ResetIndex() {
	m.index = nil
	m.addindex = nil
}

// SetOpen sets the "open" field.
func (m *BinMutation) SetOpen(b bool) {
	m.open = &b
}

// Open returns the value of the "open" field in the mutation.
func (m *BinMutation) Open() (r bool, exists bool) {
	v := m.open
	if v == nil {
		return
	}
	return *v, true
}

// OldOpen returns the old "open" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldOpen(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOpen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOpen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOpen: %w", err)
	}
	return oldValue.Open, nil
}

// ResetOpen resets all changes to the "open" field.
func (m *BinMutation) ResetOpen() {
	m.open = nil
}

// SetEnable sets the "enable" field.
func (m *BinMutation) SetEnable(b bool) {
	m.enable = &b
}

// Enable returns the value of the "enable" field in the mutation.
func (m *BinMutation) Enable() (r bool, exists bool) {
	v := m.enable
	if v == nil {
		return
	}
	return *v, true
}

// OldEnable returns the old "enable" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldEnable(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEnable is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEnable requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEnable: %w", err)
	}
	return oldValue.Enable, nil
}

// ResetEnable resets all changes to the "enable" field.
func (m *BinMutation) ResetEnable() {
	m.enable = nil
}

// SetBatterySn sets the "battery_sn" field.
func (m *BinMutation) SetBatterySn(s string) {
	m.battery_sn = &s
}

// BatterySn returns the value of the "battery_sn" field in the mutation.
func (m *BinMutation) BatterySn() (r string, exists bool) {
	v := m.battery_sn
	if v == nil {
		return
	}
	return *v, true
}

// OldBatterySn returns the old "battery_sn" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldBatterySn(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBatterySn is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBatterySn requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBatterySn: %w", err)
	}
	return oldValue.BatterySn, nil
}

// ResetBatterySn resets all changes to the "battery_sn" field.
func (m *BinMutation) ResetBatterySn() {
	m.battery_sn = nil
}

// SetVoltage sets the "voltage" field.
func (m *BinMutation) SetVoltage(f float64) {
	m.voltage = &f
	m.addvoltage = nil
}

// Voltage returns the value of the "voltage" field in the mutation.
func (m *BinMutation) Voltage() (r float64, exists bool) {
	v := m.voltage
	if v == nil {
		return
	}
	return *v, true
}

// OldVoltage returns the old "voltage" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldVoltage(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVoltage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVoltage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVoltage: %w", err)
	}
	return oldValue.Voltage, nil
}

// AddVoltage adds f to the "voltage" field.
func (m *BinMutation) AddVoltage(f float64) {
	if m.addvoltage != nil {
		*m.addvoltage += f
	} else {
		m.addvoltage = &f
	}
}

// AddedVoltage returns the value that was added to the "voltage" field in this mutation.
func (m *BinMutation) AddedVoltage() (r float64, exists bool) {
	v := m.addvoltage
	if v == nil {
		return
	}
	return *v, true
}

// ResetVoltage resets all changes to the "voltage" field.
func (m *BinMutation) ResetVoltage() {
	m.voltage = nil
	m.addvoltage = nil
}

// SetCurrent sets the "current" field.
func (m *BinMutation) SetCurrent(f float64) {
	m.current = &f
	m.addcurrent = nil
}

// Current returns the value of the "current" field in the mutation.
func (m *BinMutation) Current() (r float64, exists bool) {
	v := m.current
	if v == nil {
		return
	}
	return *v, true
}

// OldCurrent returns the old "current" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldCurrent(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCurrent is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCurrent requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCurrent: %w", err)
	}
	return oldValue.Current, nil
}

// AddCurrent adds f to the "current" field.
func (m *BinMutation) AddCurrent(f float64) {
	if m.addcurrent != nil {
		*m.addcurrent += f
	} else {
		m.addcurrent = &f
	}
}

// AddedCurrent returns the value that was added to the "current" field in this mutation.
func (m *BinMutation) AddedCurrent() (r float64, exists bool) {
	v := m.addcurrent
	if v == nil {
		return
	}
	return *v, true
}

// ResetCurrent resets all changes to the "current" field.
func (m *BinMutation) ResetCurrent() {
	m.current = nil
	m.addcurrent = nil
}

// SetSoc sets the "soc" field.
func (m *BinMutation) SetSoc(f float64) {
	m.soc = &f
	m.addsoc = nil
}

// Soc returns the value of the "soc" field in the mutation.
func (m *BinMutation) Soc() (r float64, exists bool) {
	v := m.soc
	if v == nil {
		return
	}
	return *v, true
}

// OldSoc returns the old "soc" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldSoc(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSoc is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSoc requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSoc: %w", err)
	}
	return oldValue.Soc, nil
}

// AddSoc adds f to the "soc" field.
func (m *BinMutation) AddSoc(f float64) {
	if m.addsoc != nil {
		*m.addsoc += f
	} else {
		m.addsoc = &f
	}
}

// AddedSoc returns the value that was added to the "soc" field in this mutation.
func (m *BinMutation) AddedSoc() (r float64, exists bool) {
	v := m.addsoc
	if v == nil {
		return
	}
	return *v, true
}

// ResetSoc resets all changes to the "soc" field.
func (m *BinMutation) ResetSoc() {
	m.soc = nil
	m.addsoc = nil
}

// SetSoh sets the "soh" field.
func (m *BinMutation) SetSoh(f float64) {
	m.soh = &f
	m.addsoh = nil
}

// Soh returns the value of the "soh" field in the mutation.
func (m *BinMutation) Soh() (r float64, exists bool) {
	v := m.soh
	if v == nil {
		return
	}
	return *v, true
}

// OldSoh returns the old "soh" field's value of the Bin entity.
// If the Bin object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *BinMutation) OldSoh(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSoh is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSoh requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSoh: %w", err)
	}
	return oldValue.Soh, nil
}

// AddSoh adds f to the "soh" field.
func (m *BinMutation) AddSoh(f float64) {
	if m.addsoh != nil {
		*m.addsoh += f
	} else {
		m.addsoh = &f
	}
}

// AddedSoh returns the value that was added to the "soh" field in this mutation.
func (m *BinMutation) AddedSoh() (r float64, exists bool) {
	v := m.addsoh
	if v == nil {
		return
	}
	return *v, true
}

// ResetSoh resets all changes to the "soh" field.
func (m *BinMutation) ResetSoh() {
	m.soh = nil
	m.addsoh = nil
}

// Where appends a list predicates to the BinMutation builder.
func (m *BinMutation) Where(ps ...predicate.Bin) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *BinMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Bin).
func (m *BinMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *BinMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, bin.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, bin.FieldUpdatedAt)
	}
	if m.uuid != nil {
		fields = append(fields, bin.FieldUUID)
	}
	if m.brand != nil {
		fields = append(fields, bin.FieldBrand)
	}
	if m.sn != nil {
		fields = append(fields, bin.FieldSn)
	}
	if m.name != nil {
		fields = append(fields, bin.FieldName)
	}
	if m.index != nil {
		fields = append(fields, bin.FieldIndex)
	}
	if m.open != nil {
		fields = append(fields, bin.FieldOpen)
	}
	if m.enable != nil {
		fields = append(fields, bin.FieldEnable)
	}
	if m.battery_sn != nil {
		fields = append(fields, bin.FieldBatterySn)
	}
	if m.voltage != nil {
		fields = append(fields, bin.FieldVoltage)
	}
	if m.current != nil {
		fields = append(fields, bin.FieldCurrent)
	}
	if m.soc != nil {
		fields = append(fields, bin.FieldSoc)
	}
	if m.soh != nil {
		fields = append(fields, bin.FieldSoh)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *BinMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case bin.FieldCreatedAt:
		return m.CreatedAt()
	case bin.FieldUpdatedAt:
		return m.UpdatedAt()
	case bin.FieldUUID:
		return m.UUID()
	case bin.FieldBrand:
		return m.Brand()
	case bin.FieldSn:
		return m.Sn()
	case bin.FieldName:
		return m.Name()
	case bin.FieldIndex:
		return m.Index()
	case bin.FieldOpen:
		return m.Open()
	case bin.FieldEnable:
		return m.Enable()
	case bin.FieldBatterySn:
		return m.BatterySn()
	case bin.FieldVoltage:
		return m.Voltage()
	case bin.FieldCurrent:
		return m.Current()
	case bin.FieldSoc:
		return m.Soc()
	case bin.FieldSoh:
		return m.Soh()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *BinMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case bin.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case bin.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case bin.FieldUUID:
		return m.OldUUID(ctx)
	case bin.FieldBrand:
		return m.OldBrand(ctx)
	case bin.FieldSn:
		return m.OldSn(ctx)
	case bin.FieldName:
		return m.OldName(ctx)
	case bin.FieldIndex:
		return m.OldIndex(ctx)
	case bin.FieldOpen:
		return m.OldOpen(ctx)
	case bin.FieldEnable:
		return m.OldEnable(ctx)
	case bin.FieldBatterySn:
		return m.OldBatterySn(ctx)
	case bin.FieldVoltage:
		return m.OldVoltage(ctx)
	case bin.FieldCurrent:
		return m.OldCurrent(ctx)
	case bin.FieldSoc:
		return m.OldSoc(ctx)
	case bin.FieldSoh:
		return m.OldSoh(ctx)
	}
	return nil, fmt.Errorf("unknown Bin field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BinMutation) SetField(name string, value ent.Value) error {
	switch name {
	case bin.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case bin.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case bin.FieldUUID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUUID(v)
		return nil
	case bin.FieldBrand:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBrand(v)
		return nil
	case bin.FieldSn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSn(v)
		return nil
	case bin.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case bin.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIndex(v)
		return nil
	case bin.FieldOpen:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOpen(v)
		return nil
	case bin.FieldEnable:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEnable(v)
		return nil
	case bin.FieldBatterySn:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBatterySn(v)
		return nil
	case bin.FieldVoltage:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVoltage(v)
		return nil
	case bin.FieldCurrent:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCurrent(v)
		return nil
	case bin.FieldSoc:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSoc(v)
		return nil
	case bin.FieldSoh:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSoh(v)
		return nil
	}
	return fmt.Errorf("unknown Bin field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *BinMutation) AddedFields() []string {
	var fields []string
	if m.addindex != nil {
		fields = append(fields, bin.FieldIndex)
	}
	if m.addvoltage != nil {
		fields = append(fields, bin.FieldVoltage)
	}
	if m.addcurrent != nil {
		fields = append(fields, bin.FieldCurrent)
	}
	if m.addsoc != nil {
		fields = append(fields, bin.FieldSoc)
	}
	if m.addsoh != nil {
		fields = append(fields, bin.FieldSoh)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *BinMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case bin.FieldIndex:
		return m.AddedIndex()
	case bin.FieldVoltage:
		return m.AddedVoltage()
	case bin.FieldCurrent:
		return m.AddedCurrent()
	case bin.FieldSoc:
		return m.AddedSoc()
	case bin.FieldSoh:
		return m.AddedSoh()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *BinMutation) AddField(name string, value ent.Value) error {
	switch name {
	case bin.FieldIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIndex(v)
		return nil
	case bin.FieldVoltage:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddVoltage(v)
		return nil
	case bin.FieldCurrent:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCurrent(v)
		return nil
	case bin.FieldSoc:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSoc(v)
		return nil
	case bin.FieldSoh:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSoh(v)
		return nil
	}
	return fmt.Errorf("unknown Bin numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *BinMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *BinMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *BinMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Bin nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *BinMutation) ResetField(name string) error {
	switch name {
	case bin.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case bin.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case bin.FieldUUID:
		m.ResetUUID()
		return nil
	case bin.FieldBrand:
		m.ResetBrand()
		return nil
	case bin.FieldSn:
		m.ResetSn()
		return nil
	case bin.FieldName:
		m.ResetName()
		return nil
	case bin.FieldIndex:
		m.ResetIndex()
		return nil
	case bin.FieldOpen:
		m.ResetOpen()
		return nil
	case bin.FieldEnable:
		m.ResetEnable()
		return nil
	case bin.FieldBatterySn:
		m.ResetBatterySn()
		return nil
	case bin.FieldVoltage:
		m.ResetVoltage()
		return nil
	case bin.FieldCurrent:
		m.ResetCurrent()
		return nil
	case bin.FieldSoc:
		m.ResetSoc()
		return nil
	case bin.FieldSoh:
		m.ResetSoh()
		return nil
	}
	return fmt.Errorf("unknown Bin field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *BinMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *BinMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *BinMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *BinMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *BinMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *BinMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *BinMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Bin unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *BinMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Bin edge %s", name)
}
