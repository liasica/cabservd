// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter/model"
	"github.com/auroraride/cabservd/internal/ent/cabinet"
	"github.com/auroraride/cabservd/internal/ent/scan"
	"github.com/google/uuid"
)

// ScanCreate is the builder for creating a Scan entity.
type ScanCreate struct {
	config
	mutation *ScanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (sc *ScanCreate) SetCreatedAt(t time.Time) *ScanCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *ScanCreate) SetNillableCreatedAt(t *time.Time) *ScanCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *ScanCreate) SetUpdatedAt(t time.Time) *ScanCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *ScanCreate) SetNillableUpdatedAt(t *time.Time) *ScanCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCabinetID sets the "cabinet_id" field.
func (sc *ScanCreate) SetCabinetID(u uint64) *ScanCreate {
	sc.mutation.SetCabinetID(u)
	return sc
}

// SetEfficient sets the "efficient" field.
func (sc *ScanCreate) SetEfficient(b bool) *ScanCreate {
	sc.mutation.SetEfficient(b)
	return sc
}

// SetNillableEfficient sets the "efficient" field if the given value is not nil.
func (sc *ScanCreate) SetNillableEfficient(b *bool) *ScanCreate {
	if b != nil {
		sc.SetEfficient(*b)
	}
	return sc
}

// SetUserID sets the "user_id" field.
func (sc *ScanCreate) SetUserID(s string) *ScanCreate {
	sc.mutation.SetUserID(s)
	return sc
}

// SetUserType sets the "user_type" field.
func (sc *ScanCreate) SetUserType(mt model.UserType) *ScanCreate {
	sc.mutation.SetUserType(mt)
	return sc
}

// SetSerial sets the "serial" field.
func (sc *ScanCreate) SetSerial(s string) *ScanCreate {
	sc.mutation.SetSerial(s)
	return sc
}

// SetData sets the "data" field.
func (sc *ScanCreate) SetData(mur *model.ExchangeUsableResponse) *ScanCreate {
	sc.mutation.SetData(mur)
	return sc
}

// SetID sets the "id" field.
func (sc *ScanCreate) SetID(u uuid.UUID) *ScanCreate {
	sc.mutation.SetID(u)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *ScanCreate) SetNillableID(u *uuid.UUID) *ScanCreate {
	if u != nil {
		sc.SetID(*u)
	}
	return sc
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (sc *ScanCreate) SetCabinet(c *Cabinet) *ScanCreate {
	return sc.SetCabinetID(c.ID)
}

// Mutation returns the ScanMutation object of the builder.
func (sc *ScanCreate) Mutation() *ScanMutation {
	return sc.mutation
}

// Save creates the Scan in the database.
func (sc *ScanCreate) Save(ctx context.Context) (*Scan, error) {
	sc.defaults()
	return withHooks[*Scan, ScanMutation](ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ScanCreate) SaveX(ctx context.Context) *Scan {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ScanCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ScanCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *ScanCreate) defaults() {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		v := scan.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		v := scan.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Efficient(); !ok {
		v := scan.DefaultEfficient
		sc.mutation.SetEfficient(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		v := scan.DefaultID()
		sc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ScanCreate) check() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Scan.created_at"`)}
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Scan.updated_at"`)}
	}
	if _, ok := sc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet_id", err: errors.New(`ent: missing required field "Scan.cabinet_id"`)}
	}
	if _, ok := sc.mutation.Efficient(); !ok {
		return &ValidationError{Name: "efficient", err: errors.New(`ent: missing required field "Scan.efficient"`)}
	}
	if _, ok := sc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Scan.user_id"`)}
	}
	if _, ok := sc.mutation.UserType(); !ok {
		return &ValidationError{Name: "user_type", err: errors.New(`ent: missing required field "Scan.user_type"`)}
	}
	if _, ok := sc.mutation.Serial(); !ok {
		return &ValidationError{Name: "serial", err: errors.New(`ent: missing required field "Scan.serial"`)}
	}
	if _, ok := sc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet", err: errors.New(`ent: missing required edge "Scan.cabinet"`)}
	}
	return nil
}

func (sc *ScanCreate) sqlSave(ctx context.Context) (*Scan, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ScanCreate) createSpec() (*Scan, *sqlgraph.CreateSpec) {
	var (
		_node = &Scan{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: scan.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: scan.FieldID,
			},
		}
	)
	_spec.OnConflict = sc.conflict
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(scan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(scan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.Efficient(); ok {
		_spec.SetField(scan.FieldEfficient, field.TypeBool, value)
		_node.Efficient = value
	}
	if value, ok := sc.mutation.UserID(); ok {
		_spec.SetField(scan.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := sc.mutation.UserType(); ok {
		_spec.SetField(scan.FieldUserType, field.TypeOther, value)
		_node.UserType = value
	}
	if value, ok := sc.mutation.Serial(); ok {
		_spec.SetField(scan.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := sc.mutation.Data(); ok {
		_spec.SetField(scan.FieldData, field.TypeJSON, value)
		_node.Data = value
	}
	if nodes := sc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   scan.CabinetTable,
			Columns: []string{scan.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scan.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (sc *ScanCreate) OnConflict(opts ...sql.ConflictOption) *ScanUpsertOne {
	sc.conflict = opts
	return &ScanUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ScanCreate) OnConflictColumns(columns ...string) *ScanUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ScanUpsertOne{
		create: sc,
	}
}

type (
	// ScanUpsertOne is the builder for "upsert"-ing
	//  one Scan node.
	ScanUpsertOne struct {
		create *ScanCreate
	}

	// ScanUpsert is the "OnConflict" setter.
	ScanUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *ScanUpsert) SetUpdatedAt(v time.Time) *ScanUpsert {
	u.Set(scan.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScanUpsert) UpdateUpdatedAt() *ScanUpsert {
	u.SetExcluded(scan.FieldUpdatedAt)
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ScanUpsert) SetCabinetID(v uint64) *ScanUpsert {
	u.Set(scan.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ScanUpsert) UpdateCabinetID() *ScanUpsert {
	u.SetExcluded(scan.FieldCabinetID)
	return u
}

// SetEfficient sets the "efficient" field.
func (u *ScanUpsert) SetEfficient(v bool) *ScanUpsert {
	u.Set(scan.FieldEfficient, v)
	return u
}

// UpdateEfficient sets the "efficient" field to the value that was provided on create.
func (u *ScanUpsert) UpdateEfficient() *ScanUpsert {
	u.SetExcluded(scan.FieldEfficient)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ScanUpsert) SetUserID(v string) *ScanUpsert {
	u.Set(scan.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ScanUpsert) UpdateUserID() *ScanUpsert {
	u.SetExcluded(scan.FieldUserID)
	return u
}

// SetUserType sets the "user_type" field.
func (u *ScanUpsert) SetUserType(v model.UserType) *ScanUpsert {
	u.Set(scan.FieldUserType, v)
	return u
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *ScanUpsert) UpdateUserType() *ScanUpsert {
	u.SetExcluded(scan.FieldUserType)
	return u
}

// SetSerial sets the "serial" field.
func (u *ScanUpsert) SetSerial(v string) *ScanUpsert {
	u.Set(scan.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *ScanUpsert) UpdateSerial() *ScanUpsert {
	u.SetExcluded(scan.FieldSerial)
	return u
}

// SetData sets the "data" field.
func (u *ScanUpsert) SetData(v *model.ExchangeUsableResponse) *ScanUpsert {
	u.Set(scan.FieldData, v)
	return u
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ScanUpsert) UpdateData() *ScanUpsert {
	u.SetExcluded(scan.FieldData)
	return u
}

// ClearData clears the value of the "data" field.
func (u *ScanUpsert) ClearData() *ScanUpsert {
	u.SetNull(scan.FieldData)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Scan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scan.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScanUpsertOne) UpdateNewValues() *ScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(scan.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(scan.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scan.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ScanUpsertOne) Ignore() *ScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScanUpsertOne) DoNothing() *ScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScanCreate.OnConflict
// documentation for more info.
func (u *ScanUpsertOne) Update(set func(*ScanUpsert)) *ScanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScanUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScanUpsertOne) SetUpdatedAt(v time.Time) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateUpdatedAt() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ScanUpsertOne) SetCabinetID(v uint64) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateCabinetID() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateCabinetID()
	})
}

// SetEfficient sets the "efficient" field.
func (u *ScanUpsertOne) SetEfficient(v bool) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetEfficient(v)
	})
}

// UpdateEfficient sets the "efficient" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateEfficient() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateEfficient()
	})
}

// SetUserID sets the "user_id" field.
func (u *ScanUpsertOne) SetUserID(v string) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateUserID() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateUserID()
	})
}

// SetUserType sets the "user_type" field.
func (u *ScanUpsertOne) SetUserType(v model.UserType) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateUserType() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateUserType()
	})
}

// SetSerial sets the "serial" field.
func (u *ScanUpsertOne) SetSerial(v string) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateSerial() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateSerial()
	})
}

// SetData sets the "data" field.
func (u *ScanUpsertOne) SetData(v *model.ExchangeUsableResponse) *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ScanUpsertOne) UpdateData() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateData()
	})
}

// ClearData clears the value of the "data" field.
func (u *ScanUpsertOne) ClearData() *ScanUpsertOne {
	return u.Update(func(s *ScanUpsert) {
		s.ClearData()
	})
}

// Exec executes the query.
func (u *ScanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ScanUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: ScanUpsertOne.ID is not supported by MySQL driver. Use ScanUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ScanUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Save creates the Scan in the database.
func (u *ScanUpsertOne) Save(ctx context.Context) (*Scan, error) {
	if len(u.create.conflict) == 0 {
		return nil, errors.New("ent: missing options for ScanCreate.OnConflict")
	}
	return u.create.Save(ctx)
}

// ScanCreateBulk is the builder for creating many Scan entities in bulk.
type ScanCreateBulk struct {
	config
	builders []*ScanCreate
	conflict []sql.ConflictOption
}

// Save creates the Scan entities in the database.
func (scb *ScanCreateBulk) Save(ctx context.Context) ([]*Scan, error) {
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Scan, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ScanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ScanCreateBulk) SaveX(ctx context.Context) []*Scan {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ScanCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ScanCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Scan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ScanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (scb *ScanCreateBulk) OnConflict(opts ...sql.ConflictOption) *ScanUpsertBulk {
	scb.conflict = opts
	return &ScanUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Scan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ScanCreateBulk) OnConflictColumns(columns ...string) *ScanUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ScanUpsertBulk{
		create: scb,
	}
}

// ScanUpsertBulk is the builder for "upsert"-ing
// a bulk of Scan nodes.
type ScanUpsertBulk struct {
	create *ScanCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Scan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(scan.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *ScanUpsertBulk) UpdateNewValues() *ScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(scan.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(scan.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Scan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ScanUpsertBulk) Ignore() *ScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ScanUpsertBulk) DoNothing() *ScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ScanCreateBulk.OnConflict
// documentation for more info.
func (u *ScanUpsertBulk) Update(set func(*ScanUpsert)) *ScanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ScanUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *ScanUpsertBulk) SetUpdatedAt(v time.Time) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateUpdatedAt() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ScanUpsertBulk) SetCabinetID(v uint64) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateCabinetID() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateCabinetID()
	})
}

// SetEfficient sets the "efficient" field.
func (u *ScanUpsertBulk) SetEfficient(v bool) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetEfficient(v)
	})
}

// UpdateEfficient sets the "efficient" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateEfficient() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateEfficient()
	})
}

// SetUserID sets the "user_id" field.
func (u *ScanUpsertBulk) SetUserID(v string) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateUserID() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateUserID()
	})
}

// SetUserType sets the "user_type" field.
func (u *ScanUpsertBulk) SetUserType(v model.UserType) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateUserType() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateUserType()
	})
}

// SetSerial sets the "serial" field.
func (u *ScanUpsertBulk) SetSerial(v string) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateSerial() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateSerial()
	})
}

// SetData sets the "data" field.
func (u *ScanUpsertBulk) SetData(v *model.ExchangeUsableResponse) *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.SetData(v)
	})
}

// UpdateData sets the "data" field to the value that was provided on create.
func (u *ScanUpsertBulk) UpdateData() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.UpdateData()
	})
}

// ClearData clears the value of the "data" field.
func (u *ScanUpsertBulk) ClearData() *ScanUpsertBulk {
	return u.Update(func(s *ScanUpsert) {
		s.ClearData()
	})
}

// Exec executes the query.
func (u *ScanUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ScanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ScanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ScanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
