// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/auroraride/adapter"
	"github.com/auroraride/cabservd/internal/ent/bin"
	"github.com/auroraride/cabservd/internal/ent/cabinet"
	"github.com/auroraride/cabservd/internal/ent/console"
	"github.com/google/uuid"
)

// ConsoleCreate is the builder for creating a Console entity.
type ConsoleCreate struct {
	config
	mutation *ConsoleMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCabinetID sets the "cabinet_id" field.
func (cc *ConsoleCreate) SetCabinetID(u uint64) *ConsoleCreate {
	cc.mutation.SetCabinetID(u)
	return cc
}

// SetBinID sets the "bin_id" field.
func (cc *ConsoleCreate) SetBinID(u uint64) *ConsoleCreate {
	cc.mutation.SetBinID(u)
	return cc
}

// SetNillableBinID sets the "bin_id" field if the given value is not nil.
func (cc *ConsoleCreate) SetNillableBinID(u *uint64) *ConsoleCreate {
	if u != nil {
		cc.SetBinID(*u)
	}
	return cc
}

// SetOperate sets the "operate" field.
func (cc *ConsoleCreate) SetOperate(a adapter.Operate) *ConsoleCreate {
	cc.mutation.SetOperate(a)
	return cc
}

// SetSerial sets the "serial" field.
func (cc *ConsoleCreate) SetSerial(s string) *ConsoleCreate {
	cc.mutation.SetSerial(s)
	return cc
}

// SetUUID sets the "uuid" field.
func (cc *ConsoleCreate) SetUUID(u uuid.UUID) *ConsoleCreate {
	cc.mutation.SetUUID(u)
	return cc
}

// SetBusiness sets the "business" field.
func (cc *ConsoleCreate) SetBusiness(a adapter.Business) *ConsoleCreate {
	cc.mutation.SetBusiness(a)
	return cc
}

// SetUserID sets the "user_id" field.
func (cc *ConsoleCreate) SetUserID(s string) *ConsoleCreate {
	cc.mutation.SetUserID(s)
	return cc
}

// SetUserType sets the "user_type" field.
func (cc *ConsoleCreate) SetUserType(at adapter.UserType) *ConsoleCreate {
	cc.mutation.SetUserType(at)
	return cc
}

// SetStep sets the "step" field.
func (cc *ConsoleCreate) SetStep(i int) *ConsoleCreate {
	cc.mutation.SetStep(i)
	return cc
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (cc *ConsoleCreate) SetNillableStep(i *int) *ConsoleCreate {
	if i != nil {
		cc.SetStep(*i)
	}
	return cc
}

// SetStatus sets the "status" field.
func (cc *ConsoleCreate) SetStatus(c console.Status) *ConsoleCreate {
	cc.mutation.SetStatus(c)
	return cc
}

// SetBeforeBin sets the "before_bin" field.
func (cc *ConsoleCreate) SetBeforeBin(ai *adapter.BinInfo) *ConsoleCreate {
	cc.mutation.SetBeforeBin(ai)
	return cc
}

// SetAfterBin sets the "after_bin" field.
func (cc *ConsoleCreate) SetAfterBin(ai *adapter.BinInfo) *ConsoleCreate {
	cc.mutation.SetAfterBin(ai)
	return cc
}

// SetMessage sets the "message" field.
func (cc *ConsoleCreate) SetMessage(s string) *ConsoleCreate {
	cc.mutation.SetMessage(s)
	return cc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (cc *ConsoleCreate) SetNillableMessage(s *string) *ConsoleCreate {
	if s != nil {
		cc.SetMessage(*s)
	}
	return cc
}

// SetStartAt sets the "startAt" field.
func (cc *ConsoleCreate) SetStartAt(t time.Time) *ConsoleCreate {
	cc.mutation.SetStartAt(t)
	return cc
}

// SetNillableStartAt sets the "startAt" field if the given value is not nil.
func (cc *ConsoleCreate) SetNillableStartAt(t *time.Time) *ConsoleCreate {
	if t != nil {
		cc.SetStartAt(*t)
	}
	return cc
}

// SetStopAt sets the "stopAt" field.
func (cc *ConsoleCreate) SetStopAt(t time.Time) *ConsoleCreate {
	cc.mutation.SetStopAt(t)
	return cc
}

// SetNillableStopAt sets the "stopAt" field if the given value is not nil.
func (cc *ConsoleCreate) SetNillableStopAt(t *time.Time) *ConsoleCreate {
	if t != nil {
		cc.SetStopAt(*t)
	}
	return cc
}

// SetDuration sets the "duration" field.
func (cc *ConsoleCreate) SetDuration(f float64) *ConsoleCreate {
	cc.mutation.SetDuration(f)
	return cc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (cc *ConsoleCreate) SetNillableDuration(f *float64) *ConsoleCreate {
	if f != nil {
		cc.SetDuration(*f)
	}
	return cc
}

// SetCabinet sets the "cabinet" edge to the Cabinet entity.
func (cc *ConsoleCreate) SetCabinet(c *Cabinet) *ConsoleCreate {
	return cc.SetCabinetID(c.ID)
}

// SetBin sets the "bin" edge to the Bin entity.
func (cc *ConsoleCreate) SetBin(b *Bin) *ConsoleCreate {
	return cc.SetBinID(b.ID)
}

// Mutation returns the ConsoleMutation object of the builder.
func (cc *ConsoleCreate) Mutation() *ConsoleMutation {
	return cc.mutation
}

// Save creates the Console in the database.
func (cc *ConsoleCreate) Save(ctx context.Context) (*Console, error) {
	cc.defaults()
	return withHooks[*Console, ConsoleMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *ConsoleCreate) SaveX(ctx context.Context) *Console {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *ConsoleCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *ConsoleCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *ConsoleCreate) defaults() {
	if _, ok := cc.mutation.Step(); !ok {
		v := console.DefaultStep
		cc.mutation.SetStep(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *ConsoleCreate) check() error {
	if _, ok := cc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet_id", err: errors.New(`ent: missing required field "Console.cabinet_id"`)}
	}
	if _, ok := cc.mutation.Operate(); !ok {
		return &ValidationError{Name: "operate", err: errors.New(`ent: missing required field "Console.operate"`)}
	}
	if _, ok := cc.mutation.Serial(); !ok {
		return &ValidationError{Name: "serial", err: errors.New(`ent: missing required field "Console.serial"`)}
	}
	if _, ok := cc.mutation.UUID(); !ok {
		return &ValidationError{Name: "uuid", err: errors.New(`ent: missing required field "Console.uuid"`)}
	}
	if _, ok := cc.mutation.Business(); !ok {
		return &ValidationError{Name: "business", err: errors.New(`ent: missing required field "Console.business"`)}
	}
	if v, ok := cc.mutation.Business(); ok {
		if err := console.BusinessValidator(v); err != nil {
			return &ValidationError{Name: "business", err: fmt.Errorf(`ent: validator failed for field "Console.business": %w`, err)}
		}
	}
	if _, ok := cc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Console.user_id"`)}
	}
	if _, ok := cc.mutation.UserType(); !ok {
		return &ValidationError{Name: "user_type", err: errors.New(`ent: missing required field "Console.user_type"`)}
	}
	if _, ok := cc.mutation.Step(); !ok {
		return &ValidationError{Name: "step", err: errors.New(`ent: missing required field "Console.step"`)}
	}
	if _, ok := cc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "Console.status"`)}
	}
	if v, ok := cc.mutation.Status(); ok {
		if err := console.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Console.status": %w`, err)}
		}
	}
	if _, ok := cc.mutation.CabinetID(); !ok {
		return &ValidationError{Name: "cabinet", err: errors.New(`ent: missing required edge "Console.cabinet"`)}
	}
	return nil
}

func (cc *ConsoleCreate) sqlSave(ctx context.Context) (*Console, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = uint64(id)
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *ConsoleCreate) createSpec() (*Console, *sqlgraph.CreateSpec) {
	var (
		_node = &Console{config: cc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: console.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: console.FieldID,
			},
		}
	)
	_spec.OnConflict = cc.conflict
	if value, ok := cc.mutation.Operate(); ok {
		_spec.SetField(console.FieldOperate, field.TypeOther, value)
		_node.Operate = value
	}
	if value, ok := cc.mutation.Serial(); ok {
		_spec.SetField(console.FieldSerial, field.TypeString, value)
		_node.Serial = value
	}
	if value, ok := cc.mutation.UUID(); ok {
		_spec.SetField(console.FieldUUID, field.TypeUUID, value)
		_node.UUID = value
	}
	if value, ok := cc.mutation.Business(); ok {
		_spec.SetField(console.FieldBusiness, field.TypeEnum, value)
		_node.Business = value
	}
	if value, ok := cc.mutation.UserID(); ok {
		_spec.SetField(console.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := cc.mutation.UserType(); ok {
		_spec.SetField(console.FieldUserType, field.TypeOther, value)
		_node.UserType = value
	}
	if value, ok := cc.mutation.Step(); ok {
		_spec.SetField(console.FieldStep, field.TypeInt, value)
		_node.Step = value
	}
	if value, ok := cc.mutation.Status(); ok {
		_spec.SetField(console.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := cc.mutation.BeforeBin(); ok {
		_spec.SetField(console.FieldBeforeBin, field.TypeJSON, value)
		_node.BeforeBin = value
	}
	if value, ok := cc.mutation.AfterBin(); ok {
		_spec.SetField(console.FieldAfterBin, field.TypeJSON, value)
		_node.AfterBin = value
	}
	if value, ok := cc.mutation.Message(); ok {
		_spec.SetField(console.FieldMessage, field.TypeString, value)
		_node.Message = &value
	}
	if value, ok := cc.mutation.StartAt(); ok {
		_spec.SetField(console.FieldStartAt, field.TypeTime, value)
		_node.StartAt = &value
	}
	if value, ok := cc.mutation.StopAt(); ok {
		_spec.SetField(console.FieldStopAt, field.TypeTime, value)
		_node.StopAt = &value
	}
	if value, ok := cc.mutation.Duration(); ok {
		_spec.SetField(console.FieldDuration, field.TypeFloat64, value)
		_node.Duration = &value
	}
	if nodes := cc.mutation.CabinetIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   console.CabinetTable,
			Columns: []string{console.CabinetColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: cabinet.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CabinetID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := cc.mutation.BinIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   console.BinTable,
			Columns: []string{console.BinColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUint64,
					Column: bin.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.BinID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Console.Create().
//		SetCabinetID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConsoleUpsert) {
//			SetCabinetID(v+v).
//		}).
//		Exec(ctx)
func (cc *ConsoleCreate) OnConflict(opts ...sql.ConflictOption) *ConsoleUpsertOne {
	cc.conflict = opts
	return &ConsoleUpsertOne{
		create: cc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Console.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (cc *ConsoleCreate) OnConflictColumns(columns ...string) *ConsoleUpsertOne {
	cc.conflict = append(cc.conflict, sql.ConflictColumns(columns...))
	return &ConsoleUpsertOne{
		create: cc,
	}
}

type (
	// ConsoleUpsertOne is the builder for "upsert"-ing
	//  one Console node.
	ConsoleUpsertOne struct {
		create *ConsoleCreate
	}

	// ConsoleUpsert is the "OnConflict" setter.
	ConsoleUpsert struct {
		*sql.UpdateSet
	}
)

// SetCabinetID sets the "cabinet_id" field.
func (u *ConsoleUpsert) SetCabinetID(v uint64) *ConsoleUpsert {
	u.Set(console.FieldCabinetID, v)
	return u
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateCabinetID() *ConsoleUpsert {
	u.SetExcluded(console.FieldCabinetID)
	return u
}

// SetBinID sets the "bin_id" field.
func (u *ConsoleUpsert) SetBinID(v uint64) *ConsoleUpsert {
	u.Set(console.FieldBinID, v)
	return u
}

// UpdateBinID sets the "bin_id" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateBinID() *ConsoleUpsert {
	u.SetExcluded(console.FieldBinID)
	return u
}

// ClearBinID clears the value of the "bin_id" field.
func (u *ConsoleUpsert) ClearBinID() *ConsoleUpsert {
	u.SetNull(console.FieldBinID)
	return u
}

// SetOperate sets the "operate" field.
func (u *ConsoleUpsert) SetOperate(v adapter.Operate) *ConsoleUpsert {
	u.Set(console.FieldOperate, v)
	return u
}

// UpdateOperate sets the "operate" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateOperate() *ConsoleUpsert {
	u.SetExcluded(console.FieldOperate)
	return u
}

// SetSerial sets the "serial" field.
func (u *ConsoleUpsert) SetSerial(v string) *ConsoleUpsert {
	u.Set(console.FieldSerial, v)
	return u
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateSerial() *ConsoleUpsert {
	u.SetExcluded(console.FieldSerial)
	return u
}

// SetBusiness sets the "business" field.
func (u *ConsoleUpsert) SetBusiness(v adapter.Business) *ConsoleUpsert {
	u.Set(console.FieldBusiness, v)
	return u
}

// UpdateBusiness sets the "business" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateBusiness() *ConsoleUpsert {
	u.SetExcluded(console.FieldBusiness)
	return u
}

// SetUserID sets the "user_id" field.
func (u *ConsoleUpsert) SetUserID(v string) *ConsoleUpsert {
	u.Set(console.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateUserID() *ConsoleUpsert {
	u.SetExcluded(console.FieldUserID)
	return u
}

// SetUserType sets the "user_type" field.
func (u *ConsoleUpsert) SetUserType(v adapter.UserType) *ConsoleUpsert {
	u.Set(console.FieldUserType, v)
	return u
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateUserType() *ConsoleUpsert {
	u.SetExcluded(console.FieldUserType)
	return u
}

// SetStep sets the "step" field.
func (u *ConsoleUpsert) SetStep(v int) *ConsoleUpsert {
	u.Set(console.FieldStep, v)
	return u
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateStep() *ConsoleUpsert {
	u.SetExcluded(console.FieldStep)
	return u
}

// AddStep adds v to the "step" field.
func (u *ConsoleUpsert) AddStep(v int) *ConsoleUpsert {
	u.Add(console.FieldStep, v)
	return u
}

// SetStatus sets the "status" field.
func (u *ConsoleUpsert) SetStatus(v console.Status) *ConsoleUpsert {
	u.Set(console.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateStatus() *ConsoleUpsert {
	u.SetExcluded(console.FieldStatus)
	return u
}

// SetBeforeBin sets the "before_bin" field.
func (u *ConsoleUpsert) SetBeforeBin(v *adapter.BinInfo) *ConsoleUpsert {
	u.Set(console.FieldBeforeBin, v)
	return u
}

// UpdateBeforeBin sets the "before_bin" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateBeforeBin() *ConsoleUpsert {
	u.SetExcluded(console.FieldBeforeBin)
	return u
}

// ClearBeforeBin clears the value of the "before_bin" field.
func (u *ConsoleUpsert) ClearBeforeBin() *ConsoleUpsert {
	u.SetNull(console.FieldBeforeBin)
	return u
}

// SetAfterBin sets the "after_bin" field.
func (u *ConsoleUpsert) SetAfterBin(v *adapter.BinInfo) *ConsoleUpsert {
	u.Set(console.FieldAfterBin, v)
	return u
}

// UpdateAfterBin sets the "after_bin" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateAfterBin() *ConsoleUpsert {
	u.SetExcluded(console.FieldAfterBin)
	return u
}

// ClearAfterBin clears the value of the "after_bin" field.
func (u *ConsoleUpsert) ClearAfterBin() *ConsoleUpsert {
	u.SetNull(console.FieldAfterBin)
	return u
}

// SetMessage sets the "message" field.
func (u *ConsoleUpsert) SetMessage(v string) *ConsoleUpsert {
	u.Set(console.FieldMessage, v)
	return u
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateMessage() *ConsoleUpsert {
	u.SetExcluded(console.FieldMessage)
	return u
}

// ClearMessage clears the value of the "message" field.
func (u *ConsoleUpsert) ClearMessage() *ConsoleUpsert {
	u.SetNull(console.FieldMessage)
	return u
}

// SetStartAt sets the "startAt" field.
func (u *ConsoleUpsert) SetStartAt(v time.Time) *ConsoleUpsert {
	u.Set(console.FieldStartAt, v)
	return u
}

// UpdateStartAt sets the "startAt" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateStartAt() *ConsoleUpsert {
	u.SetExcluded(console.FieldStartAt)
	return u
}

// ClearStartAt clears the value of the "startAt" field.
func (u *ConsoleUpsert) ClearStartAt() *ConsoleUpsert {
	u.SetNull(console.FieldStartAt)
	return u
}

// SetStopAt sets the "stopAt" field.
func (u *ConsoleUpsert) SetStopAt(v time.Time) *ConsoleUpsert {
	u.Set(console.FieldStopAt, v)
	return u
}

// UpdateStopAt sets the "stopAt" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateStopAt() *ConsoleUpsert {
	u.SetExcluded(console.FieldStopAt)
	return u
}

// ClearStopAt clears the value of the "stopAt" field.
func (u *ConsoleUpsert) ClearStopAt() *ConsoleUpsert {
	u.SetNull(console.FieldStopAt)
	return u
}

// SetDuration sets the "duration" field.
func (u *ConsoleUpsert) SetDuration(v float64) *ConsoleUpsert {
	u.Set(console.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ConsoleUpsert) UpdateDuration() *ConsoleUpsert {
	u.SetExcluded(console.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *ConsoleUpsert) AddDuration(v float64) *ConsoleUpsert {
	u.Add(console.FieldDuration, v)
	return u
}

// ClearDuration clears the value of the "duration" field.
func (u *ConsoleUpsert) ClearDuration() *ConsoleUpsert {
	u.SetNull(console.FieldDuration)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Console.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ConsoleUpsertOne) UpdateNewValues() *ConsoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.UUID(); exists {
			s.SetIgnore(console.FieldUUID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Console.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ConsoleUpsertOne) Ignore() *ConsoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConsoleUpsertOne) DoNothing() *ConsoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConsoleCreate.OnConflict
// documentation for more info.
func (u *ConsoleUpsertOne) Update(set func(*ConsoleUpsert)) *ConsoleUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConsoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ConsoleUpsertOne) SetCabinetID(v uint64) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateCabinetID() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateCabinetID()
	})
}

// SetBinID sets the "bin_id" field.
func (u *ConsoleUpsertOne) SetBinID(v uint64) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetBinID(v)
	})
}

// UpdateBinID sets the "bin_id" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateBinID() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateBinID()
	})
}

// ClearBinID clears the value of the "bin_id" field.
func (u *ConsoleUpsertOne) ClearBinID() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearBinID()
	})
}

// SetOperate sets the "operate" field.
func (u *ConsoleUpsertOne) SetOperate(v adapter.Operate) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetOperate(v)
	})
}

// UpdateOperate sets the "operate" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateOperate() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateOperate()
	})
}

// SetSerial sets the "serial" field.
func (u *ConsoleUpsertOne) SetSerial(v string) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateSerial() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateSerial()
	})
}

// SetBusiness sets the "business" field.
func (u *ConsoleUpsertOne) SetBusiness(v adapter.Business) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetBusiness(v)
	})
}

// UpdateBusiness sets the "business" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateBusiness() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateBusiness()
	})
}

// SetUserID sets the "user_id" field.
func (u *ConsoleUpsertOne) SetUserID(v string) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateUserID() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateUserID()
	})
}

// SetUserType sets the "user_type" field.
func (u *ConsoleUpsertOne) SetUserType(v adapter.UserType) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateUserType() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateUserType()
	})
}

// SetStep sets the "step" field.
func (u *ConsoleUpsertOne) SetStep(v int) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetStep(v)
	})
}

// AddStep adds v to the "step" field.
func (u *ConsoleUpsertOne) AddStep(v int) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.AddStep(v)
	})
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateStep() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateStep()
	})
}

// SetStatus sets the "status" field.
func (u *ConsoleUpsertOne) SetStatus(v console.Status) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateStatus() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateStatus()
	})
}

// SetBeforeBin sets the "before_bin" field.
func (u *ConsoleUpsertOne) SetBeforeBin(v *adapter.BinInfo) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetBeforeBin(v)
	})
}

// UpdateBeforeBin sets the "before_bin" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateBeforeBin() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateBeforeBin()
	})
}

// ClearBeforeBin clears the value of the "before_bin" field.
func (u *ConsoleUpsertOne) ClearBeforeBin() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearBeforeBin()
	})
}

// SetAfterBin sets the "after_bin" field.
func (u *ConsoleUpsertOne) SetAfterBin(v *adapter.BinInfo) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetAfterBin(v)
	})
}

// UpdateAfterBin sets the "after_bin" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateAfterBin() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateAfterBin()
	})
}

// ClearAfterBin clears the value of the "after_bin" field.
func (u *ConsoleUpsertOne) ClearAfterBin() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearAfterBin()
	})
}

// SetMessage sets the "message" field.
func (u *ConsoleUpsertOne) SetMessage(v string) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateMessage() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *ConsoleUpsertOne) ClearMessage() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearMessage()
	})
}

// SetStartAt sets the "startAt" field.
func (u *ConsoleUpsertOne) SetStartAt(v time.Time) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "startAt" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateStartAt() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "startAt" field.
func (u *ConsoleUpsertOne) ClearStartAt() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearStartAt()
	})
}

// SetStopAt sets the "stopAt" field.
func (u *ConsoleUpsertOne) SetStopAt(v time.Time) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetStopAt(v)
	})
}

// UpdateStopAt sets the "stopAt" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateStopAt() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateStopAt()
	})
}

// ClearStopAt clears the value of the "stopAt" field.
func (u *ConsoleUpsertOne) ClearStopAt() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearStopAt()
	})
}

// SetDuration sets the "duration" field.
func (u *ConsoleUpsertOne) SetDuration(v float64) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ConsoleUpsertOne) AddDuration(v float64) *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ConsoleUpsertOne) UpdateDuration() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *ConsoleUpsertOne) ClearDuration() *ConsoleUpsertOne {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearDuration()
	})
}

// Exec executes the query.
func (u *ConsoleUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConsoleCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConsoleUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ConsoleUpsertOne) ID(ctx context.Context) (id uint64, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ConsoleUpsertOne) IDX(ctx context.Context) uint64 {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// Save creates the Console in the database.
func (u *ConsoleUpsertOne) Save(ctx context.Context) (*Console, error) {
	if len(u.create.conflict) == 0 {
		return nil, errors.New("ent: missing options for ConsoleCreate.OnConflict")
	}
	return u.create.Save(ctx)
}

// ConsoleCreateBulk is the builder for creating many Console entities in bulk.
type ConsoleCreateBulk struct {
	config
	builders []*ConsoleCreate
	conflict []sql.ConflictOption
}

// Save creates the Console entities in the database.
func (ccb *ConsoleCreateBulk) Save(ctx context.Context) ([]*Console, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*Console, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ConsoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *ConsoleCreateBulk) SaveX(ctx context.Context) []*Console {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *ConsoleCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *ConsoleCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Console.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ConsoleUpsert) {
//			SetCabinetID(v+v).
//		}).
//		Exec(ctx)
func (ccb *ConsoleCreateBulk) OnConflict(opts ...sql.ConflictOption) *ConsoleUpsertBulk {
	ccb.conflict = opts
	return &ConsoleUpsertBulk{
		create: ccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Console.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ccb *ConsoleCreateBulk) OnConflictColumns(columns ...string) *ConsoleUpsertBulk {
	ccb.conflict = append(ccb.conflict, sql.ConflictColumns(columns...))
	return &ConsoleUpsertBulk{
		create: ccb,
	}
}

// ConsoleUpsertBulk is the builder for "upsert"-ing
// a bulk of Console nodes.
type ConsoleUpsertBulk struct {
	create *ConsoleCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Console.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ConsoleUpsertBulk) UpdateNewValues() *ConsoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.UUID(); exists {
				s.SetIgnore(console.FieldUUID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Console.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ConsoleUpsertBulk) Ignore() *ConsoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ConsoleUpsertBulk) DoNothing() *ConsoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ConsoleCreateBulk.OnConflict
// documentation for more info.
func (u *ConsoleUpsertBulk) Update(set func(*ConsoleUpsert)) *ConsoleUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ConsoleUpsert{UpdateSet: update})
	}))
	return u
}

// SetCabinetID sets the "cabinet_id" field.
func (u *ConsoleUpsertBulk) SetCabinetID(v uint64) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetCabinetID(v)
	})
}

// UpdateCabinetID sets the "cabinet_id" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateCabinetID() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateCabinetID()
	})
}

// SetBinID sets the "bin_id" field.
func (u *ConsoleUpsertBulk) SetBinID(v uint64) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetBinID(v)
	})
}

// UpdateBinID sets the "bin_id" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateBinID() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateBinID()
	})
}

// ClearBinID clears the value of the "bin_id" field.
func (u *ConsoleUpsertBulk) ClearBinID() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearBinID()
	})
}

// SetOperate sets the "operate" field.
func (u *ConsoleUpsertBulk) SetOperate(v adapter.Operate) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetOperate(v)
	})
}

// UpdateOperate sets the "operate" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateOperate() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateOperate()
	})
}

// SetSerial sets the "serial" field.
func (u *ConsoleUpsertBulk) SetSerial(v string) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetSerial(v)
	})
}

// UpdateSerial sets the "serial" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateSerial() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateSerial()
	})
}

// SetBusiness sets the "business" field.
func (u *ConsoleUpsertBulk) SetBusiness(v adapter.Business) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetBusiness(v)
	})
}

// UpdateBusiness sets the "business" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateBusiness() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateBusiness()
	})
}

// SetUserID sets the "user_id" field.
func (u *ConsoleUpsertBulk) SetUserID(v string) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateUserID() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateUserID()
	})
}

// SetUserType sets the "user_type" field.
func (u *ConsoleUpsertBulk) SetUserType(v adapter.UserType) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetUserType(v)
	})
}

// UpdateUserType sets the "user_type" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateUserType() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateUserType()
	})
}

// SetStep sets the "step" field.
func (u *ConsoleUpsertBulk) SetStep(v int) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetStep(v)
	})
}

// AddStep adds v to the "step" field.
func (u *ConsoleUpsertBulk) AddStep(v int) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.AddStep(v)
	})
}

// UpdateStep sets the "step" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateStep() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateStep()
	})
}

// SetStatus sets the "status" field.
func (u *ConsoleUpsertBulk) SetStatus(v console.Status) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateStatus() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateStatus()
	})
}

// SetBeforeBin sets the "before_bin" field.
func (u *ConsoleUpsertBulk) SetBeforeBin(v *adapter.BinInfo) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetBeforeBin(v)
	})
}

// UpdateBeforeBin sets the "before_bin" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateBeforeBin() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateBeforeBin()
	})
}

// ClearBeforeBin clears the value of the "before_bin" field.
func (u *ConsoleUpsertBulk) ClearBeforeBin() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearBeforeBin()
	})
}

// SetAfterBin sets the "after_bin" field.
func (u *ConsoleUpsertBulk) SetAfterBin(v *adapter.BinInfo) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetAfterBin(v)
	})
}

// UpdateAfterBin sets the "after_bin" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateAfterBin() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateAfterBin()
	})
}

// ClearAfterBin clears the value of the "after_bin" field.
func (u *ConsoleUpsertBulk) ClearAfterBin() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearAfterBin()
	})
}

// SetMessage sets the "message" field.
func (u *ConsoleUpsertBulk) SetMessage(v string) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetMessage(v)
	})
}

// UpdateMessage sets the "message" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateMessage() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateMessage()
	})
}

// ClearMessage clears the value of the "message" field.
func (u *ConsoleUpsertBulk) ClearMessage() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearMessage()
	})
}

// SetStartAt sets the "startAt" field.
func (u *ConsoleUpsertBulk) SetStartAt(v time.Time) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetStartAt(v)
	})
}

// UpdateStartAt sets the "startAt" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateStartAt() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateStartAt()
	})
}

// ClearStartAt clears the value of the "startAt" field.
func (u *ConsoleUpsertBulk) ClearStartAt() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearStartAt()
	})
}

// SetStopAt sets the "stopAt" field.
func (u *ConsoleUpsertBulk) SetStopAt(v time.Time) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetStopAt(v)
	})
}

// UpdateStopAt sets the "stopAt" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateStopAt() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateStopAt()
	})
}

// ClearStopAt clears the value of the "stopAt" field.
func (u *ConsoleUpsertBulk) ClearStopAt() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearStopAt()
	})
}

// SetDuration sets the "duration" field.
func (u *ConsoleUpsertBulk) SetDuration(v float64) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *ConsoleUpsertBulk) AddDuration(v float64) *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *ConsoleUpsertBulk) UpdateDuration() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.UpdateDuration()
	})
}

// ClearDuration clears the value of the "duration" field.
func (u *ConsoleUpsertBulk) ClearDuration() *ConsoleUpsertBulk {
	return u.Update(func(s *ConsoleUpsert) {
		s.ClearDuration()
	})
}

// Exec executes the query.
func (u *ConsoleUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ConsoleCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ConsoleCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ConsoleUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
