// Code generated by ent, DO NOT EDIT.

package cabinet

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the cabinet type in the database.
	Label = "cabinet"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldOnline holds the string denoting the online field in the database.
	FieldOnline = "online"
	// FieldPower holds the string denoting the power field in the database.
	FieldPower = "power"
	// FieldSerial holds the string denoting the serial field in the database.
	FieldSerial = "serial"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldEnable holds the string denoting the enable field in the database.
	FieldEnable = "enable"
	// FieldLng holds the string denoting the lng field in the database.
	FieldLng = "lng"
	// FieldLat holds the string denoting the lat field in the database.
	FieldLat = "lat"
	// FieldGsm holds the string denoting the gsm field in the database.
	FieldGsm = "gsm"
	// FieldVoltage holds the string denoting the voltage field in the database.
	FieldVoltage = "voltage"
	// FieldCurrent holds the string denoting the current field in the database.
	FieldCurrent = "current"
	// FieldTemperature holds the string denoting the temperature field in the database.
	FieldTemperature = "temperature"
	// FieldElectricity holds the string denoting the electricity field in the database.
	FieldElectricity = "electricity"
	// FieldSim holds the string denoting the sim field in the database.
	FieldSim = "sim"
	// EdgeBins holds the string denoting the bins edge name in mutations.
	EdgeBins = "bins"
	// Table holds the table name of the cabinet in the database.
	Table = "cabinet"
	// BinsTable is the table that holds the bins relation/edge.
	BinsTable = "bin"
	// BinsInverseTable is the table name for the Bin entity.
	// It exists in this package in order to avoid circular dependency with the "bin" package.
	BinsInverseTable = "bin"
	// BinsColumn is the table column denoting the bins relation/edge.
	BinsColumn = "cabinet_id"
)

// Columns holds all SQL columns for cabinet fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldOnline,
	FieldPower,
	FieldSerial,
	FieldStatus,
	FieldEnable,
	FieldLng,
	FieldLat,
	FieldGsm,
	FieldVoltage,
	FieldCurrent,
	FieldTemperature,
	FieldElectricity,
	FieldSim,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultOnline holds the default value on creation for the "online" field.
	DefaultOnline bool
	// DefaultPower holds the default value on creation for the "power" field.
	DefaultPower bool
	// DefaultEnable holds the default value on creation for the "enable" field.
	DefaultEnable bool
)

// Status defines the type for the "status" enum field.
type Status string

// StatusInitializing is the default value of the Status enum.
const DefaultStatus = StatusInitializing

// Status values.
const (
	StatusInitializing Status = "initializing"
	StatusNormal       Status = "normal"
	StatusAbnormal     Status = "abnormal"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusInitializing, StatusNormal, StatusAbnormal:
		return nil
	default:
		return fmt.Errorf("cabinet: invalid enum value for status field: %q", s)
	}
}

// OrderOption defines the ordering options for the Cabinet queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByOnline orders the results by the online field.
func ByOnline(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOnline, opts...).ToFunc()
}

// ByPower orders the results by the power field.
func ByPower(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPower, opts...).ToFunc()
}

// BySerial orders the results by the serial field.
func BySerial(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerial, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByEnable orders the results by the enable field.
func ByEnable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnable, opts...).ToFunc()
}

// ByLng orders the results by the lng field.
func ByLng(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLng, opts...).ToFunc()
}

// ByLat orders the results by the lat field.
func ByLat(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLat, opts...).ToFunc()
}

// ByGsm orders the results by the gsm field.
func ByGsm(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGsm, opts...).ToFunc()
}

// ByVoltage orders the results by the voltage field.
func ByVoltage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVoltage, opts...).ToFunc()
}

// ByCurrent orders the results by the current field.
func ByCurrent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCurrent, opts...).ToFunc()
}

// ByTemperature orders the results by the temperature field.
func ByTemperature(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTemperature, opts...).ToFunc()
}

// ByElectricity orders the results by the electricity field.
func ByElectricity(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldElectricity, opts...).ToFunc()
}

// BySim orders the results by the sim field.
func BySim(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSim, opts...).ToFunc()
}

// ByBinsCount orders the results by bins count.
func ByBinsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBinsStep(), opts...)
	}
}

// ByBins orders the results by bins terms.
func ByBins(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBinsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newBinsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BinsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BinsTable, BinsColumn),
	)
}
