// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/cabservd/internal/ent/bin"
	"github.com/auroraride/cabservd/internal/ent/cabinet"
)

// Bin is the model entity for the Bin schema.
type Bin struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CabinetID holds the value of the "cabinet_id" field.
	CabinetID uint64 `json:"cabinet_id,omitempty"`
	// 电柜设备序列号
	Serial string `json:"serial,omitempty"`
	// 仓位名称(N号仓)
	Name string `json:"name,omitempty"`
	// 仓位序号(从1开始)
	Ordinal int `json:"ordinal,omitempty"`
	// 仓门是否开启
	Open bool `json:"open,omitempty"`
	// 仓位是否启用
	Enable bool `json:"enable,omitempty"`
	// 仓位是否健康
	Health bool `json:"health,omitempty"`
	// 是否有电池
	BatteryExists bool `json:"battery_exists,omitempty"`
	// 电池序列号
	BatterySn string `json:"battery_sn,omitempty"`
	// 当前电压
	Voltage float64 `json:"voltage,omitempty"`
	// 当前电流
	Current float64 `json:"current,omitempty"`
	// 电池电量
	Soc float64 `json:"soc,omitempty"`
	// 电池健康程度
	Soh float64 `json:"soh,omitempty"`
	// 仓位备注
	Remark *string `json:"remark,omitempty"`
	// 是否停用
	Deactivate bool `json:"deactivate,omitempty"`
	// 停用信息
	DeactivateReason *string `json:"deactivate_reason,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BinQuery when eager-loading is set.
	Edges BinEdges `json:"edges"`
}

// BinEdges holds the relations/edges for other nodes in the graph.
type BinEdges struct {
	// Cabinet holds the value of the cabinet edge.
	Cabinet *Cabinet `json:"cabinet,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CabinetOrErr returns the Cabinet value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BinEdges) CabinetOrErr() (*Cabinet, error) {
	if e.loadedTypes[0] {
		if e.Cabinet == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cabinet.Label}
		}
		return e.Cabinet, nil
	}
	return nil, &NotLoadedError{edge: "cabinet"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Bin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case bin.FieldOpen, bin.FieldEnable, bin.FieldHealth, bin.FieldBatteryExists, bin.FieldDeactivate:
			values[i] = new(sql.NullBool)
		case bin.FieldVoltage, bin.FieldCurrent, bin.FieldSoc, bin.FieldSoh:
			values[i] = new(sql.NullFloat64)
		case bin.FieldID, bin.FieldCabinetID, bin.FieldOrdinal:
			values[i] = new(sql.NullInt64)
		case bin.FieldSerial, bin.FieldName, bin.FieldBatterySn, bin.FieldRemark, bin.FieldDeactivateReason:
			values[i] = new(sql.NullString)
		case bin.FieldCreatedAt, bin.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Bin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Bin fields.
func (b *Bin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case bin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			b.ID = uint64(value.Int64)
		case bin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				b.CreatedAt = value.Time
			}
		case bin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				b.UpdatedAt = value.Time
			}
		case bin.FieldCabinetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cabinet_id", values[i])
			} else if value.Valid {
				b.CabinetID = uint64(value.Int64)
			}
		case bin.FieldSerial:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial", values[i])
			} else if value.Valid {
				b.Serial = value.String
			}
		case bin.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				b.Name = value.String
			}
		case bin.FieldOrdinal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field ordinal", values[i])
			} else if value.Valid {
				b.Ordinal = int(value.Int64)
			}
		case bin.FieldOpen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field open", values[i])
			} else if value.Valid {
				b.Open = value.Bool
			}
		case bin.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				b.Enable = value.Bool
			}
		case bin.FieldHealth:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field health", values[i])
			} else if value.Valid {
				b.Health = value.Bool
			}
		case bin.FieldBatteryExists:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field battery_exists", values[i])
			} else if value.Valid {
				b.BatteryExists = value.Bool
			}
		case bin.FieldBatterySn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field battery_sn", values[i])
			} else if value.Valid {
				b.BatterySn = value.String
			}
		case bin.FieldVoltage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field voltage", values[i])
			} else if value.Valid {
				b.Voltage = value.Float64
			}
		case bin.FieldCurrent:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field current", values[i])
			} else if value.Valid {
				b.Current = value.Float64
			}
		case bin.FieldSoc:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field soc", values[i])
			} else if value.Valid {
				b.Soc = value.Float64
			}
		case bin.FieldSoh:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field soh", values[i])
			} else if value.Valid {
				b.Soh = value.Float64
			}
		case bin.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field remark", values[i])
			} else if value.Valid {
				b.Remark = new(string)
				*b.Remark = value.String
			}
		case bin.FieldDeactivate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field deactivate", values[i])
			} else if value.Valid {
				b.Deactivate = value.Bool
			}
		case bin.FieldDeactivateReason:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deactivate_reason", values[i])
			} else if value.Valid {
				b.DeactivateReason = new(string)
				*b.DeactivateReason = value.String
			}
		}
	}
	return nil
}

// QueryCabinet queries the "cabinet" edge of the Bin entity.
func (b *Bin) QueryCabinet() *CabinetQuery {
	return NewBinClient(b.config).QueryCabinet(b)
}

// Update returns a builder for updating this Bin.
// Note that you need to call Bin.Unwrap() before calling this method if this Bin
// was returned from a transaction, and the transaction was committed or rolled back.
func (b *Bin) Update() *BinUpdateOne {
	return NewBinClient(b.config).UpdateOne(b)
}

// Unwrap unwraps the Bin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (b *Bin) Unwrap() *Bin {
	_tx, ok := b.config.driver.(*txDriver)
	if !ok {
		panic("ent: Bin is not a transactional entity")
	}
	b.config.driver = _tx.drv
	return b
}

// String implements the fmt.Stringer.
func (b *Bin) String() string {
	var builder strings.Builder
	builder.WriteString("Bin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", b.ID))
	builder.WriteString("created_at=")
	builder.WriteString(b.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(b.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("cabinet_id=")
	builder.WriteString(fmt.Sprintf("%v", b.CabinetID))
	builder.WriteString(", ")
	builder.WriteString("serial=")
	builder.WriteString(b.Serial)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(b.Name)
	builder.WriteString(", ")
	builder.WriteString("ordinal=")
	builder.WriteString(fmt.Sprintf("%v", b.Ordinal))
	builder.WriteString(", ")
	builder.WriteString("open=")
	builder.WriteString(fmt.Sprintf("%v", b.Open))
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", b.Enable))
	builder.WriteString(", ")
	builder.WriteString("health=")
	builder.WriteString(fmt.Sprintf("%v", b.Health))
	builder.WriteString(", ")
	builder.WriteString("battery_exists=")
	builder.WriteString(fmt.Sprintf("%v", b.BatteryExists))
	builder.WriteString(", ")
	builder.WriteString("battery_sn=")
	builder.WriteString(b.BatterySn)
	builder.WriteString(", ")
	builder.WriteString("voltage=")
	builder.WriteString(fmt.Sprintf("%v", b.Voltage))
	builder.WriteString(", ")
	builder.WriteString("current=")
	builder.WriteString(fmt.Sprintf("%v", b.Current))
	builder.WriteString(", ")
	builder.WriteString("soc=")
	builder.WriteString(fmt.Sprintf("%v", b.Soc))
	builder.WriteString(", ")
	builder.WriteString("soh=")
	builder.WriteString(fmt.Sprintf("%v", b.Soh))
	builder.WriteString(", ")
	if v := b.Remark; v != nil {
		builder.WriteString("remark=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("deactivate=")
	builder.WriteString(fmt.Sprintf("%v", b.Deactivate))
	builder.WriteString(", ")
	if v := b.DeactivateReason; v != nil {
		builder.WriteString("deactivate_reason=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// Bins is a parsable slice of Bin.
type Bins []*Bin
