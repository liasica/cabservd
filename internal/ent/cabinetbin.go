// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/auroraride/cabservd/internal/ent/cabinetbin"
)

// CabinetBin is the model entity for the CabinetBin schema.
type CabinetBin struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// 唯一标识
	UUID string `json:"uuid,omitempty"`
	// 品牌
	Brand string `json:"brand,omitempty"`
	// 电柜设备序列号
	Sn string `json:"sn,omitempty"`
	// 仓位名称(N号仓)
	Name string `json:"name,omitempty"`
	// 仓位序号(从0开始)
	Index int `json:"index,omitempty"`
	// 仓门是否开启
	Open bool `json:"open,omitempty"`
	// 仓位是否启用
	Enable bool `json:"enable,omitempty"`
	// 电池序列号
	BatterySn string `json:"battery_sn,omitempty"`
	// 当前电压
	Voltage float64 `json:"voltage,omitempty"`
	// 当前电流
	Current float64 `json:"current,omitempty"`
	// 电池电量
	Soc float64 `json:"soc,omitempty"`
	// 电池健康程度
	Soh float64 `json:"soh,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CabinetBin) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cabinetbin.FieldOpen, cabinetbin.FieldEnable:
			values[i] = new(sql.NullBool)
		case cabinetbin.FieldVoltage, cabinetbin.FieldCurrent, cabinetbin.FieldSoc, cabinetbin.FieldSoh:
			values[i] = new(sql.NullFloat64)
		case cabinetbin.FieldID, cabinetbin.FieldIndex:
			values[i] = new(sql.NullInt64)
		case cabinetbin.FieldUUID, cabinetbin.FieldBrand, cabinetbin.FieldSn, cabinetbin.FieldName, cabinetbin.FieldBatterySn:
			values[i] = new(sql.NullString)
		case cabinetbin.FieldCreatedAt, cabinetbin.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CabinetBin", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CabinetBin fields.
func (cb *CabinetBin) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cabinetbin.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cb.ID = uint64(value.Int64)
		case cabinetbin.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cb.CreatedAt = value.Time
			}
		case cabinetbin.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				cb.UpdatedAt = value.Time
			}
		case cabinetbin.FieldUUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uuid", values[i])
			} else if value.Valid {
				cb.UUID = value.String
			}
		case cabinetbin.FieldBrand:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brand", values[i])
			} else if value.Valid {
				cb.Brand = value.String
			}
		case cabinetbin.FieldSn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sn", values[i])
			} else if value.Valid {
				cb.Sn = value.String
			}
		case cabinetbin.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				cb.Name = value.String
			}
		case cabinetbin.FieldIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field index", values[i])
			} else if value.Valid {
				cb.Index = int(value.Int64)
			}
		case cabinetbin.FieldOpen:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field open", values[i])
			} else if value.Valid {
				cb.Open = value.Bool
			}
		case cabinetbin.FieldEnable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable", values[i])
			} else if value.Valid {
				cb.Enable = value.Bool
			}
		case cabinetbin.FieldBatterySn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field battery_sn", values[i])
			} else if value.Valid {
				cb.BatterySn = value.String
			}
		case cabinetbin.FieldVoltage:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field voltage", values[i])
			} else if value.Valid {
				cb.Voltage = value.Float64
			}
		case cabinetbin.FieldCurrent:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field current", values[i])
			} else if value.Valid {
				cb.Current = value.Float64
			}
		case cabinetbin.FieldSoc:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field soc", values[i])
			} else if value.Valid {
				cb.Soc = value.Float64
			}
		case cabinetbin.FieldSoh:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field soh", values[i])
			} else if value.Valid {
				cb.Soh = value.Float64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CabinetBin.
// Note that you need to call CabinetBin.Unwrap() before calling this method if this CabinetBin
// was returned from a transaction, and the transaction was committed or rolled back.
func (cb *CabinetBin) Update() *CabinetBinUpdateOne {
	return (&CabinetBinClient{config: cb.config}).UpdateOne(cb)
}

// Unwrap unwraps the CabinetBin entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cb *CabinetBin) Unwrap() *CabinetBin {
	_tx, ok := cb.config.driver.(*txDriver)
	if !ok {
		panic("ent: CabinetBin is not a transactional entity")
	}
	cb.config.driver = _tx.drv
	return cb
}

// String implements the fmt.Stringer.
func (cb *CabinetBin) String() string {
	var builder strings.Builder
	builder.WriteString("CabinetBin(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cb.ID))
	builder.WriteString("created_at=")
	builder.WriteString(cb.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(cb.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("uuid=")
	builder.WriteString(cb.UUID)
	builder.WriteString(", ")
	builder.WriteString("brand=")
	builder.WriteString(cb.Brand)
	builder.WriteString(", ")
	builder.WriteString("sn=")
	builder.WriteString(cb.Sn)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(cb.Name)
	builder.WriteString(", ")
	builder.WriteString("index=")
	builder.WriteString(fmt.Sprintf("%v", cb.Index))
	builder.WriteString(", ")
	builder.WriteString("open=")
	builder.WriteString(fmt.Sprintf("%v", cb.Open))
	builder.WriteString(", ")
	builder.WriteString("enable=")
	builder.WriteString(fmt.Sprintf("%v", cb.Enable))
	builder.WriteString(", ")
	builder.WriteString("battery_sn=")
	builder.WriteString(cb.BatterySn)
	builder.WriteString(", ")
	builder.WriteString("voltage=")
	builder.WriteString(fmt.Sprintf("%v", cb.Voltage))
	builder.WriteString(", ")
	builder.WriteString("current=")
	builder.WriteString(fmt.Sprintf("%v", cb.Current))
	builder.WriteString(", ")
	builder.WriteString("soc=")
	builder.WriteString(fmt.Sprintf("%v", cb.Soc))
	builder.WriteString(", ")
	builder.WriteString("soh=")
	builder.WriteString(fmt.Sprintf("%v", cb.Soh))
	builder.WriteByte(')')
	return builder.String()
}

// CabinetBins is a parsable slice of CabinetBin.
type CabinetBins []*CabinetBin

func (cb CabinetBins) config(cfg config) {
	for _i := range cb {
		cb[_i].config = cfg
	}
}
